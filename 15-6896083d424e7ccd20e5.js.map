{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.object.keys.js","webpack:///./node_modules/core-js/modules/es6.typed.uint16-array.js","webpack:///./node_modules/core-js/modules/es6.typed.int16-array.js","webpack:///./node_modules/core-js/modules/es6.typed.int8-array.js","webpack:///./node_modules/core-js/modules/_object-sap.js","webpack:///../node_modules/math.gl/dist/esm/lib/common.js","webpack:///./node_modules/core-js/modules/es6.array.from.js","webpack:///./node_modules/core-js/modules/_create-property.js","webpack:///./node_modules/@luma.gl/constants/src/index.js","webpack:///./node_modules/gl-matrix/esm/mat3.js","webpack:///./node_modules/gl-matrix/esm/quat.js","webpack:///./node_modules/math.gl/dist/esm/quaternion.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/gltf/gltf-animator.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/gltf/gltf-material-parser.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/gltf/create-gltf-model.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/gltf/gltf-instantiator.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/gltf/create-gltf-objects.js","webpack:///./node_modules/@probe.gl/stats-widget/dist/esm/stats-widget.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/gltf/gltf-scenegraph-loader.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/gltf/gltf-environment.js","webpack:///../node_modules/math.gl/dist/esm/lib/math-array.js","webpack:///../node_modules/math.gl/dist/esm/lib/validators.js","webpack:///../node_modules/math.gl/dist/esm/lib/vector.js","webpack:///../node_modules/gl-matrix/esm/common.js","webpack:///../node_modules/gl-matrix/esm/vec2.js","webpack:///../node_modules/math.gl/dist/esm/vector2.js","webpack:///../node_modules/gl-matrix/esm/vec3.js","webpack:///../node_modules/math.gl/dist/esm/vector3.js","webpack:///../node_modules/math.gl/dist/esm/vector4.js","webpack:///../node_modules/gl-matrix/esm/mat4.js","webpack:///../node_modules/gl-matrix/esm/vec4.js","webpack:///../node_modules/math.gl/dist/esm/matrix4.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/webvr/display.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/webvr/vr-button.js","webpack:///./node_modules/@luma.gl/addons/dist/esm/webvr/vr-display.js"],"names":["toObject","__webpack_require__","$keys","it","init","data","byteOffset","length","this","$export","core","fails","module","exports","KEY","exec","fn","Object","exp","S","F","d","__webpack_exports__","config","checkNumber","formatValue","radians","equals","value","Number","isFinite","Error","concat","round","Math","EPSILON","_ref$precision","arguments","undefined","precision","parseFloat","toPrecision","isArray","Array","ArrayBuffer","isView","map","func","result","array","clone","i","degrees","PI","a","b","abs","max","debug","printTypes","printDegrees","printRowMajor","ctx","call","isArrayIter","toLength","createProperty","getIterFn","iter","from","arrayLike","step","iterator","O","C","aLen","mapfn","mapping","index","iterFn","next","done","$defineProperty","createDesc","object","f","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","COLOR_BUFFER_BIT","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","BLEND_EQUATION","BLEND_EQUATION_RGB","BLEND_EQUATION_ALPHA","BLEND_DST_RGB","BLEND_SRC_RGB","BLEND_DST_ALPHA","BLEND_SRC_ALPHA","BLEND_COLOR","ARRAY_BUFFER_BINDING","ELEMENT_ARRAY_BUFFER_BINDING","LINE_WIDTH","ALIASED_POINT_SIZE_RANGE","ALIASED_LINE_WIDTH_RANGE","CULL_FACE_MODE","FRONT_FACE","DEPTH_RANGE","DEPTH_WRITEMASK","DEPTH_CLEAR_VALUE","DEPTH_FUNC","STENCIL_CLEAR_VALUE","STENCIL_FUNC","STENCIL_FAIL","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STENCIL_BACK_FUNC","STENCIL_BACK_FAIL","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","VIEWPORT","SCISSOR_BOX","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","UNPACK_ALIGNMENT","PACK_ALIGNMENT","MAX_TEXTURE_SIZE","MAX_VIEWPORT_DIMS","SUBPIXEL_BITS","RED_BITS","GREEN_BITS","BLUE_BITS","ALPHA_BITS","DEPTH_BITS","STENCIL_BITS","POLYGON_OFFSET_UNITS","POLYGON_OFFSET_FACTOR","TEXTURE_BINDING_2D","SAMPLE_BUFFERS","SAMPLES","SAMPLE_COVERAGE_VALUE","SAMPLE_COVERAGE_INVERT","COMPRESSED_TEXTURE_FORMATS","VENDOR","RENDERER","VERSION","IMPLEMENTATION_COLOR_READ_TYPE","IMPLEMENTATION_COLOR_READ_FORMAT","BROWSER_DEFAULT_WEBGL","STATIC_DRAW","STREAM_DRAW","DYNAMIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BUFFER_USAGE","CURRENT_VERTEX_ATTRIB","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","CULL_FACE","FRONT","BACK","FRONT_AND_BACK","BLEND","DEPTH_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_COVERAGE","SCISSOR_TEST","STENCIL_TEST","NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","CW","CCW","DONT_CARE","FASTEST","NICEST","GENERATE_MIPMAP_HINT","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","DEPTH_COMPONENT","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","FRAGMENT_SHADER","VERTEX_SHADER","COMPILE_STATUS","DELETE_STATUS","LINK_STATUS","VALIDATE_STATUS","ATTACHED_SHADERS","ACTIVE_ATTRIBUTES","ACTIVE_UNIFORMS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VARYING_VECTORS","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_IMAGE_UNITS","MAX_FRAGMENT_UNIFORM_VECTORS","SHADER_TYPE","SHADING_LANGUAGE_VERSION","CURRENT_PROGRAM","NEVER","ALWAYS","LESS","EQUAL","LEQUAL","GREATER","GEQUAL","NOTEQUAL","KEEP","REPLACE","INCR","DECR","INVERT","INCR_WRAP","DECR_WRAP","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_2D","TEXTURE","TEXTURE_CUBE_MAP","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","MAX_CUBE_MAP_TEXTURE_SIZE","TEXTURE0","ACTIVE_TEXTURE","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","TEXTURE_WIDTH","TEXTURE_HEIGHT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","LOW_FLOAT","MEDIUM_FLOAT","HIGH_FLOAT","LOW_INT","MEDIUM_INT","HIGH_INT","FRAMEBUFFER","RENDERBUFFER","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","RENDERBUFFER_WIDTH","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_STENCIL_SIZE","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","NONE","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_BINDING","RENDERBUFFER_BINDING","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","MAX_RENDERBUFFER_SIZE","INVALID_FRAMEBUFFER_OPERATION","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_COLORSPACE_CONVERSION_WEBGL","READ_BUFFER","UNPACK_ROW_LENGTH","UNPACK_SKIP_ROWS","UNPACK_SKIP_PIXELS","PACK_ROW_LENGTH","PACK_SKIP_ROWS","PACK_SKIP_PIXELS","TEXTURE_BINDING_3D","UNPACK_SKIP_IMAGES","UNPACK_IMAGE_HEIGHT","MAX_3D_TEXTURE_SIZE","MAX_ELEMENTS_VERTICES","MAX_ELEMENTS_INDICES","MAX_TEXTURE_LOD_BIAS","MAX_FRAGMENT_UNIFORM_COMPONENTS","MAX_VERTEX_UNIFORM_COMPONENTS","MAX_ARRAY_TEXTURE_LAYERS","MIN_PROGRAM_TEXEL_OFFSET","MAX_PROGRAM_TEXEL_OFFSET","MAX_VARYING_COMPONENTS","FRAGMENT_SHADER_DERIVATIVE_HINT","RASTERIZER_DISCARD","VERTEX_ARRAY_BINDING","MAX_VERTEX_OUTPUT_COMPONENTS","MAX_FRAGMENT_INPUT_COMPONENTS","MAX_SERVER_WAIT_TIMEOUT","MAX_ELEMENT_INDEX","RED","RGB8","RGBA8","RGB10_A2","TEXTURE_3D","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","TEXTURE_COMPARE_MODE","TEXTURE_COMPARE_FUNC","SRGB","SRGB8","SRGB8_ALPHA8","COMPARE_REF_TO_TEXTURE","RGBA32F","RGB32F","RGBA16F","RGB16F","TEXTURE_2D_ARRAY","TEXTURE_BINDING_2D_ARRAY","R11F_G11F_B10F","RGB9_E5","RGBA32UI","RGB32UI","RGBA16UI","RGB16UI","RGBA8UI","RGB8UI","RGBA32I","RGB32I","RGBA16I","RGB16I","RGBA8I","RGB8I","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","R8","RG8","R16F","R32F","RG16F","RG32F","R8I","R8UI","R16I","R16UI","R32I","R32UI","RG8I","RG8UI","RG16I","RG16UI","RG32I","RG32UI","R8_SNORM","RG8_SNORM","RGB8_SNORM","RGBA8_SNORM","RGB10_A2UI","TEXTURE_IMMUTABLE_FORMAT","TEXTURE_IMMUTABLE_LEVELS","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","HALF_FLOAT","RG","RG_INTEGER","INT_2_10_10_10_REV","CURRENT_QUERY","QUERY_RESULT","QUERY_RESULT_AVAILABLE","ANY_SAMPLES_PASSED","ANY_SAMPLES_PASSED_CONSERVATIVE","MAX_DRAW_BUFFERS","DRAW_BUFFER0","DRAW_BUFFER1","DRAW_BUFFER2","DRAW_BUFFER3","DRAW_BUFFER4","DRAW_BUFFER5","DRAW_BUFFER6","DRAW_BUFFER7","DRAW_BUFFER8","DRAW_BUFFER9","DRAW_BUFFER10","DRAW_BUFFER11","DRAW_BUFFER12","DRAW_BUFFER13","DRAW_BUFFER14","DRAW_BUFFER15","MAX_COLOR_ATTACHMENTS","COLOR_ATTACHMENT1","COLOR_ATTACHMENT2","COLOR_ATTACHMENT3","COLOR_ATTACHMENT4","COLOR_ATTACHMENT5","COLOR_ATTACHMENT6","COLOR_ATTACHMENT7","COLOR_ATTACHMENT8","COLOR_ATTACHMENT9","COLOR_ATTACHMENT10","COLOR_ATTACHMENT11","COLOR_ATTACHMENT12","COLOR_ATTACHMENT13","COLOR_ATTACHMENT14","COLOR_ATTACHMENT15","SAMPLER_3D","SAMPLER_2D_SHADOW","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","MAX_SAMPLES","SAMPLER_BINDING","PIXEL_PACK_BUFFER","PIXEL_UNPACK_BUFFER","PIXEL_PACK_BUFFER_BINDING","PIXEL_UNPACK_BUFFER_BINDING","COPY_READ_BUFFER","COPY_WRITE_BUFFER","COPY_READ_BUFFER_BINDING","COPY_WRITE_BUFFER_BINDING","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","UNSIGNED_NORMALIZED","SIGNED_NORMALIZED","VERTEX_ATTRIB_ARRAY_INTEGER","VERTEX_ATTRIB_ARRAY_DIVISOR","TRANSFORM_FEEDBACK_BUFFER_MODE","MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","TRANSFORM_FEEDBACK_VARYINGS","TRANSFORM_FEEDBACK_BUFFER_START","TRANSFORM_FEEDBACK_BUFFER_SIZE","TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","SEPARATE_ATTRIBS","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK_BUFFER_BINDING","TRANSFORM_FEEDBACK","TRANSFORM_FEEDBACK_PAUSED","TRANSFORM_FEEDBACK_ACTIVE","TRANSFORM_FEEDBACK_BINDING","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","FRAMEBUFFER_ATTACHMENT_RED_SIZE","FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","FRAMEBUFFER_DEFAULT","DEPTH24_STENCIL8","DRAW_FRAMEBUFFER_BINDING","READ_FRAMEBUFFER_BINDING","RENDERBUFFER_SAMPLES","FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","UNIFORM_BUFFER","UNIFORM_BUFFER_BINDING","UNIFORM_BUFFER_START","UNIFORM_BUFFER_SIZE","MAX_VERTEX_UNIFORM_BLOCKS","MAX_FRAGMENT_UNIFORM_BLOCKS","MAX_COMBINED_UNIFORM_BLOCKS","MAX_UNIFORM_BUFFER_BINDINGS","MAX_UNIFORM_BLOCK_SIZE","MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","UNIFORM_BUFFER_OFFSET_ALIGNMENT","ACTIVE_UNIFORM_BLOCKS","UNIFORM_TYPE","UNIFORM_SIZE","UNIFORM_BLOCK_INDEX","UNIFORM_OFFSET","UNIFORM_ARRAY_STRIDE","UNIFORM_MATRIX_STRIDE","UNIFORM_IS_ROW_MAJOR","UNIFORM_BLOCK_BINDING","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORMS","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","OBJECT_TYPE","SYNC_CONDITION","SYNC_STATUS","SYNC_FLAGS","SYNC_FENCE","SYNC_GPU_COMMANDS_COMPLETE","UNSIGNALED","SIGNALED","ALREADY_SIGNALED","TIMEOUT_EXPIRED","CONDITION_SATISFIED","WAIT_FAILED","SYNC_FLUSH_COMMANDS_BIT","COLOR","DEPTH","STENCIL","MIN","MAX","DEPTH_COMPONENT24","STREAM_READ","STREAM_COPY","STATIC_READ","STATIC_COPY","DYNAMIC_READ","DYNAMIC_COPY","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","INVALID_INDEX","TIMEOUT_IGNORED","MAX_CLIENT_WAIT_TIMEOUT_WEBGL","VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE","UNMASKED_VENDOR_WEBGL","UNMASKED_RENDERER_WEBGL","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_R11_EAC","COMPRESSED_RG11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ETC2","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB_ATC_WEBGL","COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL","COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL","UNSIGNED_INT_24_8_WEBGL","HALF_FLOAT_OES","RGBA32F_EXT","RGB32F_EXT","FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT","UNSIGNED_NORMALIZED_EXT","MIN_EXT","MAX_EXT","SRGB_EXT","SRGB_ALPHA_EXT","SRGB8_ALPHA8_EXT","FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT","FRAGMENT_SHADER_DERIVATIVE_HINT_OES","COLOR_ATTACHMENT0_WEBGL","COLOR_ATTACHMENT1_WEBGL","COLOR_ATTACHMENT2_WEBGL","COLOR_ATTACHMENT3_WEBGL","COLOR_ATTACHMENT4_WEBGL","COLOR_ATTACHMENT5_WEBGL","COLOR_ATTACHMENT6_WEBGL","COLOR_ATTACHMENT7_WEBGL","COLOR_ATTACHMENT8_WEBGL","COLOR_ATTACHMENT9_WEBGL","COLOR_ATTACHMENT10_WEBGL","COLOR_ATTACHMENT11_WEBGL","COLOR_ATTACHMENT12_WEBGL","COLOR_ATTACHMENT13_WEBGL","COLOR_ATTACHMENT14_WEBGL","COLOR_ATTACHMENT15_WEBGL","DRAW_BUFFER0_WEBGL","DRAW_BUFFER1_WEBGL","DRAW_BUFFER2_WEBGL","DRAW_BUFFER3_WEBGL","DRAW_BUFFER4_WEBGL","DRAW_BUFFER5_WEBGL","DRAW_BUFFER6_WEBGL","DRAW_BUFFER7_WEBGL","DRAW_BUFFER8_WEBGL","DRAW_BUFFER9_WEBGL","DRAW_BUFFER10_WEBGL","DRAW_BUFFER11_WEBGL","DRAW_BUFFER12_WEBGL","DRAW_BUFFER13_WEBGL","DRAW_BUFFER14_WEBGL","DRAW_BUFFER15_WEBGL","MAX_COLOR_ATTACHMENTS_WEBGL","MAX_DRAW_BUFFERS_WEBGL","VERTEX_ARRAY_BINDING_OES","QUERY_COUNTER_BITS_EXT","CURRENT_QUERY_EXT","QUERY_RESULT_EXT","QUERY_RESULT_AVAILABLE_EXT","TIME_ELAPSED_EXT","TIMESTAMP_EXT","GPU_DISJOINT_EXT","quat_create","out","esm_common","Float32Array","quat_setAxisAngle","axis","rad","s","sin","cos","quat_multiply","ax","ay","az","aw","bx","by","bz","bw","quat_slerp","t","omega","cosom","sinom","scale0","scale1","acos","fromMat3","m","fRoot","fTrace","sqrt","j","k","vec4","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","quat_set","quat_add","quat_scale","quat_dot","quat_lerp","quat_length","quat_squaredLength","quat_normalize","quat_rotationTo","vec3","dot","IDENTITY_QUATERNION","quaternion_Quaternion","_MathArray","Quaternion","_this","x","y","z","w","classCallCheck","possibleConstructorReturn","getPrototypeOf","copy","set","inherits","createClass","key","check","vectorA","vectorB","a0","a1","a2","a3","invDot","quat_rotateX","quat_rotateY","quat_rotateZ","l","_ref","_ref$start","start","target","ratio","get","common","math_array","ATTRIBUTE_TYPE_TO_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","5120","Int8Array","5121","Uint8Array","5122","Int16Array","5123","Uint16Array","5125","Uint32Array","5126","accessorToJsArray","accessor","_animation","ArrayType","componentType","components","type","count","_accessor$bufferView$","bufferView","buffer","slicedArray","push","slice","helperMatrix","matrix4","quaternion","interpolate","time","_ref2","path","input","interpolation","output","animationTime","nextIndex","findIndex","previousIndex","esm","warn","previousTime","nextTime","stepInterpolate","stop","slerp","_i","linearInterpolate","_ratio","tDiff","p0","outTangent0","inTangent1","p1","m0","m1","pow","cubicsplineInterpolate","gltf_animator_GLTFAnimation","GLTFAnimation","props","startTime","playing","speed","assign","timeMs","channels","forEach","_ref3","sampler","gltfNode","node","matrix","identity","translation","translate","rotation","rotationMatrix","fromQuaternion","multiplyRight","scale","applyTranslationRotationScale","_node","gltf_animator_GLTFAnimator","GLTFAnimator","gltf","animations","animation","name","samplers","_ref4","_ref4$interpolation","accessors","_ref5","nodes","animate","gltf_material_parser_GLTFMaterialParser","GLTFMaterialParser","gl","attributes","material","pbrDebug","imageBasedLightingEnvironment","lights","defines","USE_TEX_LOD","MANUAL_SRGB","SRGB_FAST_APPROXIMATION","uniforms","u_Camera","u_MetallicRoughnessValues","parameters","generatedTextures","u_DiffuseEnvSampler","getDiffuseEnvSampler","u_SpecularEnvSampler","getSpecularEnvSampler","u_brdfLUT","getBrdfTexture","u_ScaleIBLAmbient","u_ScaleDiffBaseMR","u_ScaleFGDSpec","defineIfPresent","NORMAL","TANGENT","TEXCOORD_0","parseMaterial","gltfTexture","define","texture","id","pixelStore","defineProperty","source","getImageAsync","pbrMetallicRoughness","baseColorTexture","parseTexture","u_BaseColorFactor","baseColorFactor","metallicRoughnessTexture","_pbrMetallicRoughness","metallicFactor","_pbrMetallicRoughness2","roughnessFactor","parsePbrMetallicRoughness","normalTexture","_material$normalTextu","u_NormalScale","occlusionTexture","_material$occlusionTe","strength","u_OcclusionStrength","emissiveTexture","u_EmissiveFactor","emissiveFactor","alphaMode","_material$alphaCutoff","alphaCutoff","ALPHA_CUTOFF","u_AlphaCutoff","blend","blendEquation","blendFunc","vs","fs","addVersionToShader","gltf_instantiator_ATTRIBUTE_TYPE_TO_COMPONENTS","DEFAULT_OPTIONS","modelOptions","gltf_instantiator_GLTFInstantiator","GLTFInstantiator","options","scenes","scene","createScene","gltfScene","_this2","createNode","children","_this3","child","mesh","createMesh","setMatrix","gltfMesh","_this4","_mesh","primitives","gltfPrimitive","createPrimitive","drawMode","vertexCount","materialParser","info","managedResources","apply","toConsumableArray","values","attribute","model","modules","setProps","setUniforms","createGLTFModel","mode","indices","getVertexCount","createAttributes","_this5","loadedAttributes","keys","attrName","createAccessor","createBuffer","generated","lumaBuffers","offset","stride","byteStride","size","gltfSampler","createGLTFObjects","instantiator","instantiate","animator","createAnimator","StatsWidget","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","DEFAULT_CSS","css","position","zIndex","color","background","fontFamily","padding","fontSize","lineSpacing","headerCSS","itemCSS","paddingLeft","DEFAULT_FORMATTERS","stat","averageTime","formatTime","getAverageTime","totalTime","fps","getHz","memory","unit","KB","MB","GB","toFixed","formatMemory","stats","opts","title","_css","_headerCSS","header","_itemCSS","item","_container","_header","_items","_counter","_framesPerUpdate","framesPerUpdate","_formatters","_resetOnUpdate","formatters","fm","resetOnUpdate","_name","_createDOM","container","_createDOMItem","innerHTML","_getLines","join","reset","document","createElement","style","body","appendChild","_name2","innerText","statName","split","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","n","_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_luma_gl_core__WEBPACK_IMPORTED_MODULE_3__","_loaders_gl_gltf__WEBPACK_IMPORTED_MODULE_4__","_create_gltf_objects__WEBPACK_IMPORTED_MODULE_5__","_parse","mark","_callee","uri","loader","gltfObjects","wrap","_context","prev","parse","decompress","sent","waitForFullLoad","waitForGLTFAssets","abrupt","_x5","_waitForGLTFAssets","_callee2","remaining","_context2","traverse","program","uniform","loaded","waitWhileCondition","some","_x6","_waitWhileCondition","_callee3","condition","_context3","Promise","resolve","window","requestAnimationFrame","extensions","_x","_x2","_x3","_x4","GLTFEnvironment","_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","brdfLutUrl","getTexUrl","getTextureForFace","pixels","FACES","face","mipmaps","_parameters","_DiffuseEnvSampler","makeCube","dir","_parameters2","_SpecularEnvSampler","imageArray","lod","_parameters3","_BrdfTexture","math_array_MathArray","_extendableBuiltin2","MathArray","constructor","ELEMENTS","formatString","string","ai","vector","min","minVector","maxVector","valid","validate","subtract","addScalar","cls","ExtendableBuiltin","instance","Reflect","construct","setPrototypeOf","prototype","create","enumerable","writable","configurable","__proto__","_extendableBuiltin","validateVector","v","every","assert","vector_Vector","Vector","lengthSquared","mathArray","distanceSquared","dist","product","magnitude","_len","vectors","_key","_len2","_key2","_i2","_len3","_key3","_i3","_len4","_key4","_i4","_scale","multiply","distance","add","multiplyScalar","ARRAY_TYPE","random","vec","vector2_Vector2","_Vector","Vector2","atan2","_operation","args","vec3_fromValues","vec3_normalize","len","ORIGIN","vector3_Vector3","Vector3","tempA","tempB","cosine","vec3_dot","vec3_angle","c","p","r","_ref$origin","origin","_ref2$origin","_ref3$origin","vector4_Vector4","Vector4","transformVector","mat4_multiply","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b0","b1","b2","b3","mat4_scale","vec4_transformMat4","matrix4_Matrix4","IDENTITY","Matrix4","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","setColumnMajor","q","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","fromQuat","left","right","bottom","top","near","far","rl","tb","nf","mat4_frustum","eye","_ref2$center","center","_ref2$up","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","mat4_lookAt","_ref3$near","_ref3$far","lr","bt","mat4_ortho","_ref4$fovy","fovy","_ref4$aspect","aspect","_ref4$focalDistance","focalDistance","_ref4$near","_ref4$far","halfY","tan","ortho","_ref5$fov","fov","_ref5$aspect","_ref5$near","_ref5$far","Infinity","mat4_perspective","mat4_transpose","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","_ref6","_ref7","slicedToArray","rx","ry","rz","rotateX","rotateY","rotateZ","b12","b20","b21","b22","mat4_rotate","factor","transformMat4","vec3_transformMat4","transformVector2","transformVector3","transformVector4","_transformVector","Boolean","display_Display","Display","width","height","params","viewport","scissor","scissorTest","renderFrame","views","getViews","animationLoop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","view","onRender","objectSpread","_iterator","Symbol","err","submitFrame","createEnterVRButton","canvas","_canvas$getBoundingCl","getBoundingClientRect","pointerEvents","button","border","borderRadius","font","cursor","margin","display","textContent","vr_display_VRDisplay","_Display","VRDisplay","_vrSupported","isSupported","vrFrameData","VRFrameData","vrPresenting","vrFrame","addEventListener","_vrDisplayPresentChange","bind","assertThisInitialized","navigator","_removeVRButton","_addVRButton","vrDisplay","getFrameData","_this$vrFrameData","leftProjectionMatrix","leftViewMatrix","rightProjectionMatrix","rightViewMatrix","displayEye","projectionMatrix","viewMatrix","_addVRButton2","asyncToGenerator","regenerator_default","displays","vrButton","_getCanvas","getVRDisplays","displayName","onclick","_startDisplay","requestPresent","isPresenting"],"mappings":"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","file":"15-6896083d424e7ccd20e5.js","sourcesContent":["// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","var config = {};\nconfig.EPSILON = 1e-12;\nconfig.debug = true;\nconfig.precision = 4;\nconfig.printTypes = false;\nconfig.printDegrees = false;\nconfig.printRowMajor = true;\nexport { config };\nexport function configure(options) {\n  if ('epsilon' in options) {\n    config.EPSILON = options.epsilon;\n  }\n\n  if ('debug' in options) {\n    config.debug = options.debug;\n  }\n}\nexport function checkNumber(value) {\n  if (!Number.isFinite(value)) {\n    throw new Error(\"Invalid number \".concat(value));\n  }\n\n  return value;\n}\n\nfunction round(value) {\n  return Math.round(value / config.EPSILON) * config.EPSILON;\n}\n\nexport function formatValue(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;\n\n  value = round(value);\n  return parseFloat(value.toPrecision(precision));\n}\nexport function formatAngle(value) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$precision = _ref2.precision,\n      precision = _ref2$precision === void 0 ? config.precision || 4 : _ref2$precision,\n      _ref2$printDegrees = _ref2.printDegrees,\n      printDegrees = _ref2$printDegrees === void 0 ? config.printAngles : _ref2$printDegrees;\n\n  value = printDegrees ? degrees(value) : value;\n  value = round(value);\n  return \"\".concat(parseFloat(value.toPrecision(precision))).concat(printDegrees ? '°' : '');\n}\nexport function isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;\n}\nexport function clone(array) {\n  return array.clone ? array.clone() : new Array(array);\n}\n\nfunction map(value, func) {\n  if (isArray(value)) {\n    var result = clone(value);\n\n    for (var i = 0; i < result.length; ++i) {\n      result[i] = func(result[i], i, result);\n    }\n\n    return result;\n  }\n\n  return func(value);\n}\n\nexport function radians(degrees) {\n  return map(degrees, function (degrees) {\n    return degrees / 180 * Math.PI;\n  });\n}\nexport function degrees(radians) {\n  return map(radians, function (radians) {\n    return radians * 180 / Math.PI;\n  });\n}\nexport function sin(radians) {\n  return map(radians, function (angle) {\n    return Math.sin(angle);\n  });\n}\nexport function cos(radians) {\n  return map(radians, function (angle) {\n    return Math.cos(angle);\n  });\n}\nexport function tan(radians) {\n  return map(radians, function (angle) {\n    return Math.tan(angle);\n  });\n}\nexport function asin(radians) {\n  return map(radians, function (angle) {\n    return Math.asin(angle);\n  });\n}\nexport function acos(radians) {\n  return map(radians, function (angle) {\n    return Math.acos(angle);\n  });\n}\nexport function atan(radians) {\n  return map(radians, function (angle) {\n    return Math.atan(angle);\n  });\n}\nexport function clamp(value, min, max) {\n  return map(value, function (value) {\n    return Math.max(min, Math.min(max, value));\n  });\n}\nexport function lerp(a, b, t) {\n  if (isArray(a)) {\n    return a.map(function (ai, i) {\n      return lerp(ai, b[i], t);\n    });\n  }\n\n  return t * b + (1 - t) * a;\n}\nexport function equals(a, b) {\n  if (isArray(a) && isArray(b)) {\n    if (a === b) {\n      return true;\n    }\n\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!equals(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n//# sourceMappingURL=common.js.map","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// GL constants, copied from Mozilla documentation\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n\n// Standard WebGL 1 constants\n// These constants are defined on the WebGLRenderingContext interface.\n\n/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */\n// eslint-disable-next-line\nmodule.exports = {\n  // Clearing buffers\n  // Constants passed to clear() to clear buffer masks.\n\n  DEPTH_BUFFER_BIT: 0x00000100,\n  STENCIL_BUFFER_BIT: 0x00000400,\n  COLOR_BUFFER_BIT: 0x00004000,\n\n  // Rendering primitives\n  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.\n\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n\n  // Blending modes\n  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).\n\n  ZERO: 0,\n  ONE: 1,\n  SRC_COLOR: 0x0300,\n  ONE_MINUS_SRC_COLOR: 0x0301,\n  SRC_ALPHA: 0x0302,\n  ONE_MINUS_SRC_ALPHA: 0x0303,\n  DST_ALPHA: 0x0304,\n  ONE_MINUS_DST_ALPHA: 0x0305,\n  DST_COLOR: 0x0306,\n  ONE_MINUS_DST_COLOR: 0x0307,\n  SRC_ALPHA_SATURATE: 0x0308,\n  CONSTANT_COLOR: 0x8001,\n  ONE_MINUS_CONSTANT_COLOR: 0x8002,\n  CONSTANT_ALPHA: 0x8003,\n  ONE_MINUS_CONSTANT_ALPHA: 0x8004,\n\n  // Blending equations\n  // Constants passed to blendEquation() or blendEquationSeparate() to control\n  // how the blending is calculated (for both, RBG and alpha, or separately).\n\n  FUNC_ADD: 0x8006,\n  FUNC_SUBTRACT: 0x800a,\n  FUNC_REVERSE_SUBTRACT: 0x800b,\n\n  // Getting GL parameter information\n  // Constants passed to getParameter() to specify what information to return.\n\n  BLEND_EQUATION: 0x8009,\n  BLEND_EQUATION_RGB: 0x8009,\n  BLEND_EQUATION_ALPHA: 0x883d,\n  BLEND_DST_RGB: 0x80c8,\n  BLEND_SRC_RGB: 0x80c9,\n  BLEND_DST_ALPHA: 0x80ca,\n  BLEND_SRC_ALPHA: 0x80cb,\n  BLEND_COLOR: 0x8005,\n  ARRAY_BUFFER_BINDING: 0x8894,\n  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,\n  LINE_WIDTH: 0x0b21,\n  ALIASED_POINT_SIZE_RANGE: 0x846d,\n  ALIASED_LINE_WIDTH_RANGE: 0x846e,\n  CULL_FACE_MODE: 0x0b45,\n  FRONT_FACE: 0x0b46,\n  DEPTH_RANGE: 0x0b70,\n  DEPTH_WRITEMASK: 0x0b72,\n  DEPTH_CLEAR_VALUE: 0x0b73,\n  DEPTH_FUNC: 0x0b74,\n  STENCIL_CLEAR_VALUE: 0x0b91,\n  STENCIL_FUNC: 0x0b92,\n  STENCIL_FAIL: 0x0b94,\n  STENCIL_PASS_DEPTH_FAIL: 0x0b95,\n  STENCIL_PASS_DEPTH_PASS: 0x0b96,\n  STENCIL_REF: 0x0b97,\n  STENCIL_VALUE_MASK: 0x0b93,\n  STENCIL_WRITEMASK: 0x0b98,\n  STENCIL_BACK_FUNC: 0x8800,\n  STENCIL_BACK_FAIL: 0x8801,\n  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,\n  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,\n  STENCIL_BACK_REF: 0x8ca3,\n  STENCIL_BACK_VALUE_MASK: 0x8ca4,\n  STENCIL_BACK_WRITEMASK: 0x8ca5,\n  VIEWPORT: 0x0ba2,\n  SCISSOR_BOX: 0x0c10,\n  COLOR_CLEAR_VALUE: 0x0c22,\n  COLOR_WRITEMASK: 0x0c23,\n  UNPACK_ALIGNMENT: 0x0cf5,\n  PACK_ALIGNMENT: 0x0d05,\n  MAX_TEXTURE_SIZE: 0x0d33,\n  MAX_VIEWPORT_DIMS: 0x0d3a,\n  SUBPIXEL_BITS: 0x0d50,\n  RED_BITS: 0x0d52,\n  GREEN_BITS: 0x0d53,\n  BLUE_BITS: 0x0d54,\n  ALPHA_BITS: 0x0d55,\n  DEPTH_BITS: 0x0d56,\n  STENCIL_BITS: 0x0d57,\n  POLYGON_OFFSET_UNITS: 0x2a00,\n  POLYGON_OFFSET_FACTOR: 0x8038,\n  TEXTURE_BINDING_2D: 0x8069,\n  SAMPLE_BUFFERS: 0x80a8,\n  SAMPLES: 0x80a9,\n  SAMPLE_COVERAGE_VALUE: 0x80aa,\n  SAMPLE_COVERAGE_INVERT: 0x80ab,\n  COMPRESSED_TEXTURE_FORMATS: 0x86a3,\n  VENDOR: 0x1f00,\n  RENDERER: 0x1f01,\n  VERSION: 0x1f02,\n  IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a,\n  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b,\n  BROWSER_DEFAULT_WEBGL: 0x9244,\n\n  // Buffers\n  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or\n  // getBufferParameter().\n\n  STATIC_DRAW: 0x88e4,\n  STREAM_DRAW: 0x88e0,\n  DYNAMIC_DRAW: 0x88e8,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  BUFFER_SIZE: 0x8764,\n  BUFFER_USAGE: 0x8765,\n\n  // Vertex attributes\n  // Constants passed to getVertexAttrib().\n\n  CURRENT_VERTEX_ATTRIB: 0x8626,\n  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,\n  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,\n  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,\n  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,\n  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a,\n  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,\n  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f,\n\n  // Culling\n  // Constants passed to cullFace().\n\n  CULL_FACE: 0x0b44,\n  FRONT: 0x0404,\n  BACK: 0x0405,\n  FRONT_AND_BACK: 0x0408,\n\n  // Enabling and disabling\n  // Constants passed to enable() or disable().\n\n  BLEND: 0x0be2,\n  DEPTH_TEST: 0x0b71,\n  DITHER: 0x0bd0,\n  POLYGON_OFFSET_FILL: 0x8037,\n  SAMPLE_ALPHA_TO_COVERAGE: 0x809e,\n  SAMPLE_COVERAGE: 0x80a0,\n  SCISSOR_TEST: 0x0c11,\n  STENCIL_TEST: 0x0b90,\n\n  // Errors\n  // Constants returned from getError().\n\n  NO_ERROR: 0,\n  INVALID_ENUM: 0x0500,\n  INVALID_VALUE: 0x0501,\n  INVALID_OPERATION: 0x0502,\n  OUT_OF_MEMORY: 0x0505,\n  CONTEXT_LOST_WEBGL: 0x9242,\n\n  // Front face directions\n  // Constants passed to frontFace().\n\n  CW: 0x0900,\n  CCW: 0x0901,\n\n  // Hints\n  // Constants passed to hint()\n\n  DONT_CARE: 0x1100,\n  FASTEST: 0x1101,\n  NICEST: 0x1102,\n  GENERATE_MIPMAP_HINT: 0x8192,\n\n  // Data types\n\n  BYTE: 0x1400,\n  UNSIGNED_BYTE: 0x1401,\n  SHORT: 0x1402,\n  UNSIGNED_SHORT: 0x1403,\n  INT: 0x1404,\n  UNSIGNED_INT: 0x1405,\n  FLOAT: 0x1406,\n\n  // Pixel formats\n\n  DEPTH_COMPONENT: 0x1902,\n  ALPHA: 0x1906,\n  RGB: 0x1907,\n  RGBA: 0x1908,\n  LUMINANCE: 0x1909,\n  LUMINANCE_ALPHA: 0x190a,\n\n  // Pixel types\n\n  // UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT_4_4_4_4: 0x8033,\n  UNSIGNED_SHORT_5_5_5_1: 0x8034,\n  UNSIGNED_SHORT_5_6_5: 0x8363,\n\n  // Shaders\n  // Constants passed to createShader() or getShaderParameter()\n\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n  COMPILE_STATUS: 0x8b81,\n  DELETE_STATUS: 0x8b80,\n  LINK_STATUS: 0x8b82,\n  VALIDATE_STATUS: 0x8b83,\n  ATTACHED_SHADERS: 0x8b85,\n  ACTIVE_ATTRIBUTES: 0x8b89,\n  ACTIVE_UNIFORMS: 0x8b86,\n  MAX_VERTEX_ATTRIBS: 0x8869,\n  MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb,\n  MAX_VARYING_VECTORS: 0x8dfc,\n  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d,\n  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c,\n  MAX_TEXTURE_IMAGE_UNITS: 0x8872,\n  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd,\n  SHADER_TYPE: 0x8b4f,\n  SHADING_LANGUAGE_VERSION: 0x8b8c,\n  CURRENT_PROGRAM: 0x8b8d,\n\n  // Depth or stencil tests\n  // Constants passed to depthFunc() or stencilFunc().\n\n  NEVER: 0x0200,\n  ALWAYS: 0x0207,\n  LESS: 0x0201,\n  EQUAL: 0x0202,\n  LEQUAL: 0x0203,\n  GREATER: 0x0204,\n  GEQUAL: 0x0206,\n  NOTEQUAL: 0x0205,\n\n  // Stencil actions\n  // Constants passed to stencilOp().\n\n  KEEP: 0x1e00,\n  REPLACE: 0x1e01,\n  INCR: 0x1e02,\n  DECR: 0x1e03,\n  INVERT: 0x150a,\n  INCR_WRAP: 0x8507,\n  DECR_WRAP: 0x8508,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n  TEXTURE_2D: 0x0de1,\n  TEXTURE: 0x1702,\n  TEXTURE_CUBE_MAP: 0x8513,\n  TEXTURE_BINDING_CUBE_MAP: 0x8514,\n  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,\n  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,\n  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,\n  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,\n  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,\n  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a,\n  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c,\n  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.\n  TEXTURE0: 0x84c0,\n  ACTIVE_TEXTURE: 0x84e0,\n  REPEAT: 0x2901,\n  CLAMP_TO_EDGE: 0x812f,\n  MIRRORED_REPEAT: 0x8370,\n\n  // Emulation\n  TEXTURE_WIDTH: 0x1000,\n  TEXTURE_HEIGHT: 0x1001,\n\n  // Uniform types\n\n  FLOAT_VEC2: 0x8b50,\n  FLOAT_VEC3: 0x8b51,\n  FLOAT_VEC4: 0x8b52,\n  INT_VEC2: 0x8b53,\n  INT_VEC3: 0x8b54,\n  INT_VEC4: 0x8b55,\n  BOOL: 0x8b56,\n  BOOL_VEC2: 0x8b57,\n  BOOL_VEC3: 0x8b58,\n  BOOL_VEC4: 0x8b59,\n  FLOAT_MAT2: 0x8b5a,\n  FLOAT_MAT3: 0x8b5b,\n  FLOAT_MAT4: 0x8b5c,\n  SAMPLER_2D: 0x8b5e,\n  SAMPLER_CUBE: 0x8b60,\n\n  // Shader precision-specified types\n\n  LOW_FLOAT: 0x8df0,\n  MEDIUM_FLOAT: 0x8df1,\n  HIGH_FLOAT: 0x8df2,\n  LOW_INT: 0x8df3,\n  MEDIUM_INT: 0x8df4,\n  HIGH_INT: 0x8df5,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER: 0x8d40,\n  RENDERBUFFER: 0x8d41,\n  RGBA4: 0x8056,\n  RGB5_A1: 0x8057,\n  RGB565: 0x8d62,\n  DEPTH_COMPONENT16: 0x81a5,\n  STENCIL_INDEX: 0x1901,\n  STENCIL_INDEX8: 0x8d48,\n  DEPTH_STENCIL: 0x84f9,\n  RENDERBUFFER_WIDTH: 0x8d42,\n  RENDERBUFFER_HEIGHT: 0x8d43,\n  RENDERBUFFER_INTERNAL_FORMAT: 0x8d44,\n  RENDERBUFFER_RED_SIZE: 0x8d50,\n  RENDERBUFFER_GREEN_SIZE: 0x8d51,\n  RENDERBUFFER_BLUE_SIZE: 0x8d52,\n  RENDERBUFFER_ALPHA_SIZE: 0x8d53,\n  RENDERBUFFER_DEPTH_SIZE: 0x8d54,\n  RENDERBUFFER_STENCIL_SIZE: 0x8d55,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0,\n  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3,\n  COLOR_ATTACHMENT0: 0x8ce0,\n  DEPTH_ATTACHMENT: 0x8d00,\n  STENCIL_ATTACHMENT: 0x8d20,\n  DEPTH_STENCIL_ATTACHMENT: 0x821a,\n  NONE: 0,\n  FRAMEBUFFER_COMPLETE: 0x8cd5,\n  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6,\n  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7,\n  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9,\n  FRAMEBUFFER_UNSUPPORTED: 0x8cdd,\n  FRAMEBUFFER_BINDING: 0x8ca6,\n  RENDERBUFFER_BINDING: 0x8ca7,\n  READ_FRAMEBUFFER: 0x8ca8,\n  DRAW_FRAMEBUFFER: 0x8ca9,\n  MAX_RENDERBUFFER_SIZE: 0x84e8,\n  INVALID_FRAMEBUFFER_OPERATION: 0x0506,\n\n  // Pixel storage modes\n  // Constants passed to pixelStorei().\n\n  UNPACK_FLIP_Y_WEBGL: 0x9240,\n  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,\n  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,\n\n  // /////////////////////////////////////////////////////\n  // Additional constants defined WebGL 2\n  // These constants are defined on the WebGL2RenderingContext interface.\n  // All WebGL 1 constants are also available in a WebGL 2 context.\n  // /////////////////////////////////////////////////////\n\n  // Getting GL parameter information\n  // Constants passed to getParameter()\n  // to specify what information to return.\n\n  READ_BUFFER: 0x0c02,\n  UNPACK_ROW_LENGTH: 0x0cf2,\n  UNPACK_SKIP_ROWS: 0x0cf3,\n  UNPACK_SKIP_PIXELS: 0x0cf4,\n  PACK_ROW_LENGTH: 0x0d02,\n  PACK_SKIP_ROWS: 0x0d03,\n  PACK_SKIP_PIXELS: 0x0d04,\n  TEXTURE_BINDING_3D: 0x806a,\n  UNPACK_SKIP_IMAGES: 0x806d,\n  UNPACK_IMAGE_HEIGHT: 0x806e,\n  MAX_3D_TEXTURE_SIZE: 0x8073,\n  MAX_ELEMENTS_VERTICES: 0x80e8,\n  MAX_ELEMENTS_INDICES: 0x80e9,\n  MAX_TEXTURE_LOD_BIAS: 0x84fd,\n  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49,\n  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a,\n  MAX_ARRAY_TEXTURE_LAYERS: 0x88ff,\n  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,\n  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,\n  MAX_VARYING_COMPONENTS: 0x8b4b,\n  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b,\n  RASTERIZER_DISCARD: 0x8c89,\n  VERTEX_ARRAY_BINDING: 0x85b5,\n  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,\n  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,\n  MAX_SERVER_WAIT_TIMEOUT: 0x9111,\n  MAX_ELEMENT_INDEX: 0x8d6b,\n\n  // Textures\n  // Constants passed to texParameteri(),\n  // texParameterf(), bindTexture(), texImage2D(), and others.\n\n  RED: 0x1903,\n  RGB8: 0x8051,\n  RGBA8: 0x8058,\n  RGB10_A2: 0x8059,\n  TEXTURE_3D: 0x806f,\n  TEXTURE_WRAP_R: 0x8072,\n  TEXTURE_MIN_LOD: 0x813a,\n  TEXTURE_MAX_LOD: 0x813b,\n  TEXTURE_BASE_LEVEL: 0x813c,\n  TEXTURE_MAX_LEVEL: 0x813d,\n  TEXTURE_COMPARE_MODE: 0x884c,\n  TEXTURE_COMPARE_FUNC: 0x884d,\n  SRGB: 0x8c40,\n  SRGB8: 0x8c41,\n  SRGB8_ALPHA8: 0x8c43,\n  COMPARE_REF_TO_TEXTURE: 0x884e,\n  RGBA32F: 0x8814,\n  RGB32F: 0x8815,\n  RGBA16F: 0x881a,\n  RGB16F: 0x881b,\n  TEXTURE_2D_ARRAY: 0x8c1a,\n  TEXTURE_BINDING_2D_ARRAY: 0x8c1d,\n  R11F_G11F_B10F: 0x8c3a,\n  RGB9_E5: 0x8c3d,\n  RGBA32UI: 0x8d70,\n  RGB32UI: 0x8d71,\n  RGBA16UI: 0x8d76,\n  RGB16UI: 0x8d77,\n  RGBA8UI: 0x8d7c,\n  RGB8UI: 0x8d7d,\n  RGBA32I: 0x8d82,\n  RGB32I: 0x8d83,\n  RGBA16I: 0x8d88,\n  RGB16I: 0x8d89,\n  RGBA8I: 0x8d8e,\n  RGB8I: 0x8d8f,\n  RED_INTEGER: 0x8d94,\n  RGB_INTEGER: 0x8d98,\n  RGBA_INTEGER: 0x8d99,\n  R8: 0x8229,\n  RG8: 0x822b,\n  R16F: 0x822d,\n  R32F: 0x822e,\n  RG16F: 0x822f,\n  RG32F: 0x8230,\n  R8I: 0x8231,\n  R8UI: 0x8232,\n  R16I: 0x8233,\n  R16UI: 0x8234,\n  R32I: 0x8235,\n  R32UI: 0x8236,\n  RG8I: 0x8237,\n  RG8UI: 0x8238,\n  RG16I: 0x8239,\n  RG16UI: 0x823a,\n  RG32I: 0x823b,\n  RG32UI: 0x823c,\n  R8_SNORM: 0x8f94,\n  RG8_SNORM: 0x8f95,\n  RGB8_SNORM: 0x8f96,\n  RGBA8_SNORM: 0x8f97,\n  RGB10_A2UI: 0x906f,\n\n  /* covered by extension\n  COMPRESSED_R11_EAC : 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC : 0x9273,\n  COMPRESSED_RGB8_ETC2 : 0x9274,\n  COMPRESSED_SRGB8_ETC2: 0x9275,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,\n  */\n  TEXTURE_IMMUTABLE_FORMAT: 0x912f,\n  TEXTURE_IMMUTABLE_LEVELS: 0x82df,\n\n  // Pixel types\n\n  UNSIGNED_INT_2_10_10_10_REV: 0x8368,\n  UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,\n  UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,\n  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,\n  UNSIGNED_INT_24_8: 0x84fa,\n  HALF_FLOAT: 0x140b,\n  RG: 0x8227,\n  RG_INTEGER: 0x8228,\n  INT_2_10_10_10_REV: 0x8d9f,\n\n  // Queries\n\n  CURRENT_QUERY: 0x8865,\n  QUERY_RESULT: 0x8866,\n  QUERY_RESULT_AVAILABLE: 0x8867,\n  ANY_SAMPLES_PASSED: 0x8c2f,\n  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a,\n\n  // Draw buffers\n\n  MAX_DRAW_BUFFERS: 0x8824,\n  DRAW_BUFFER0: 0x8825,\n  DRAW_BUFFER1: 0x8826,\n  DRAW_BUFFER2: 0x8827,\n  DRAW_BUFFER3: 0x8828,\n  DRAW_BUFFER4: 0x8829,\n  DRAW_BUFFER5: 0x882a,\n  DRAW_BUFFER6: 0x882b,\n  DRAW_BUFFER7: 0x882c,\n  DRAW_BUFFER8: 0x882d,\n  DRAW_BUFFER9: 0x882e,\n  DRAW_BUFFER10: 0x882f,\n  DRAW_BUFFER11: 0x8830,\n  DRAW_BUFFER12: 0x8831,\n  DRAW_BUFFER13: 0x8832,\n  DRAW_BUFFER14: 0x8833,\n  DRAW_BUFFER15: 0x8834,\n  MAX_COLOR_ATTACHMENTS: 0x8cdf,\n  COLOR_ATTACHMENT1: 0x8ce1,\n  COLOR_ATTACHMENT2: 0x8ce2,\n  COLOR_ATTACHMENT3: 0x8ce3,\n  COLOR_ATTACHMENT4: 0x8ce4,\n  COLOR_ATTACHMENT5: 0x8ce5,\n  COLOR_ATTACHMENT6: 0x8ce6,\n  COLOR_ATTACHMENT7: 0x8ce7,\n  COLOR_ATTACHMENT8: 0x8ce8,\n  COLOR_ATTACHMENT9: 0x8ce9,\n  COLOR_ATTACHMENT10: 0x8cea,\n  COLOR_ATTACHMENT11: 0x8ceb,\n  COLOR_ATTACHMENT12: 0x8cec,\n  COLOR_ATTACHMENT13: 0x8ced,\n  COLOR_ATTACHMENT14: 0x8cee,\n  COLOR_ATTACHMENT15: 0x8cef,\n\n  // Samplers\n\n  SAMPLER_3D: 0x8b5f,\n  SAMPLER_2D_SHADOW: 0x8b62,\n  SAMPLER_2D_ARRAY: 0x8dc1,\n  SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,\n  SAMPLER_CUBE_SHADOW: 0x8dc5,\n  INT_SAMPLER_2D: 0x8dca,\n  INT_SAMPLER_3D: 0x8dcb,\n  INT_SAMPLER_CUBE: 0x8dcc,\n  INT_SAMPLER_2D_ARRAY: 0x8dcf,\n  UNSIGNED_INT_SAMPLER_2D: 0x8dd2,\n  UNSIGNED_INT_SAMPLER_3D: 0x8dd3,\n  UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,\n  MAX_SAMPLES: 0x8d57,\n  SAMPLER_BINDING: 0x8919,\n\n  // Buffers\n\n  PIXEL_PACK_BUFFER: 0x88eb,\n  PIXEL_UNPACK_BUFFER: 0x88ec,\n  PIXEL_PACK_BUFFER_BINDING: 0x88ed,\n  PIXEL_UNPACK_BUFFER_BINDING: 0x88ef,\n  COPY_READ_BUFFER: 0x8f36,\n  COPY_WRITE_BUFFER: 0x8f37,\n  COPY_READ_BUFFER_BINDING: 0x8f36,\n  COPY_WRITE_BUFFER_BINDING: 0x8f37,\n\n  // Data types\n\n  FLOAT_MAT2x3: 0x8b65,\n  FLOAT_MAT2x4: 0x8b66,\n  FLOAT_MAT3x2: 0x8b67,\n  FLOAT_MAT3x4: 0x8b68,\n  FLOAT_MAT4x2: 0x8b69,\n  FLOAT_MAT4x3: 0x8b6a,\n  UNSIGNED_INT_VEC2: 0x8dc6,\n  UNSIGNED_INT_VEC3: 0x8dc7,\n  UNSIGNED_INT_VEC4: 0x8dc8,\n  UNSIGNED_NORMALIZED: 0x8c17,\n  SIGNED_NORMALIZED: 0x8f9c,\n\n  // Vertex attributes\n\n  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd,\n  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe,\n\n  // Transform feedback\n\n  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80,\n  TRANSFORM_FEEDBACK_VARYINGS: 0x8c83,\n  TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84,\n  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85,\n  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88,\n  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a,\n  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b,\n  INTERLEAVED_ATTRIBS: 0x8c8c,\n  SEPARATE_ATTRIBS: 0x8c8d,\n  TRANSFORM_FEEDBACK_BUFFER: 0x8c8e,\n  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f,\n  TRANSFORM_FEEDBACK: 0x8e22,\n  TRANSFORM_FEEDBACK_PAUSED: 0x8e23,\n  TRANSFORM_FEEDBACK_ACTIVE: 0x8e24,\n  TRANSFORM_FEEDBACK_BINDING: 0x8e25,\n\n  // Framebuffers and renderbuffers\n\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,\n  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,\n  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,\n  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,\n  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,\n  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,\n  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,\n  FRAMEBUFFER_DEFAULT: 0x8218,\n  // DEPTH_STENCIL_ATTACHMENT : 0x821A,\n  // DEPTH_STENCIL: 0x84F9,\n  DEPTH24_STENCIL8: 0x88f0,\n  DRAW_FRAMEBUFFER_BINDING: 0x8ca6,\n  READ_FRAMEBUFFER_BINDING: 0x8caa,\n  RENDERBUFFER_SAMPLES: 0x8cab,\n  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4,\n  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56,\n\n  // Uniforms\n\n  UNIFORM_BUFFER: 0x8a11,\n  UNIFORM_BUFFER_BINDING: 0x8a28,\n  UNIFORM_BUFFER_START: 0x8a29,\n  UNIFORM_BUFFER_SIZE: 0x8a2a,\n  MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b,\n  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d,\n  MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e,\n  MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f,\n  MAX_UNIFORM_BLOCK_SIZE: 0x8a30,\n  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31,\n  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33,\n  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34,\n  ACTIVE_UNIFORM_BLOCKS: 0x8a36,\n  UNIFORM_TYPE: 0x8a37,\n  UNIFORM_SIZE: 0x8a38,\n  UNIFORM_BLOCK_INDEX: 0x8a3a,\n  UNIFORM_OFFSET: 0x8a3b,\n  UNIFORM_ARRAY_STRIDE: 0x8a3c,\n  UNIFORM_MATRIX_STRIDE: 0x8a3d,\n  UNIFORM_IS_ROW_MAJOR: 0x8a3e,\n  UNIFORM_BLOCK_BINDING: 0x8a3f,\n  UNIFORM_BLOCK_DATA_SIZE: 0x8a40,\n  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42,\n  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43,\n  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44,\n  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46,\n\n  // Sync objects\n\n  OBJECT_TYPE: 0x9112,\n  SYNC_CONDITION: 0x9113,\n  SYNC_STATUS: 0x9114,\n  SYNC_FLAGS: 0x9115,\n  SYNC_FENCE: 0x9116,\n  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,\n  UNSIGNALED: 0x9118,\n  SIGNALED: 0x9119,\n  ALREADY_SIGNALED: 0x911a,\n  TIMEOUT_EXPIRED: 0x911b,\n  CONDITION_SATISFIED: 0x911c,\n  WAIT_FAILED: 0x911d,\n  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,\n\n  // Miscellaneous constants\n\n  COLOR: 0x1800,\n  DEPTH: 0x1801,\n  STENCIL: 0x1802,\n  MIN: 0x8007,\n  MAX: 0x8008,\n  DEPTH_COMPONENT24: 0x81a6,\n  STREAM_READ: 0x88e1,\n  STREAM_COPY: 0x88e2,\n  STATIC_READ: 0x88e5,\n  STATIC_COPY: 0x88e6,\n  DYNAMIC_READ: 0x88e9,\n  DYNAMIC_COPY: 0x88ea,\n  DEPTH_COMPONENT32F: 0x8cac,\n  DEPTH32F_STENCIL8: 0x8cad,\n  INVALID_INDEX: 0xffffffff,\n  TIMEOUT_IGNORED: -1,\n  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,\n\n  // Constants defined in WebGL extensions\n\n  // ANGLE_instanced_arrays\n\n  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,\n\n  // WEBGL_debug_renderer_info\n\n  UNMASKED_VENDOR_WEBGL: 0x9245,\n  UNMASKED_RENDERER_WEBGL: 0x9246,\n\n  // EXT_texture_filter_anisotropic\n\n  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84ff,\n  TEXTURE_MAX_ANISOTROPY_EXT: 0x84fe,\n\n  // WEBGL_compressed_texture_s3tc\n\n  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0,\n  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1,\n  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2,\n  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3,\n\n  // WEBGL_compressed_texture_es3\n\n  COMPRESSED_R11_EAC: 0x9270,\n  COMPRESSED_SIGNED_R11_EAC: 0x9271,\n  COMPRESSED_RG11_EAC: 0x9272,\n  COMPRESSED_SIGNED_RG11_EAC: 0x9273,\n  COMPRESSED_RGB8_ETC2: 0x9274,\n  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,\n  COMPRESSED_SRGB8_ETC2: 0x9276,\n  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,\n  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,\n  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,\n\n  // WEBGL_compressed_texture_pvrtc\n\n  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00,\n  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02,\n  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01,\n  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03,\n\n  // WEBGL_compressed_texture_etc1\n\n  COMPRESSED_RGB_ETC1_WEBGL: 0x8d64,\n\n  // WEBGL_compressed_texture_atc\n\n  COMPRESSED_RGB_ATC_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8c92,\n  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87ee,\n\n  // WEBGL_depth_texture\n\n  UNSIGNED_INT_24_8_WEBGL: 0x84fa,\n\n  // OES_texture_half_float\n\n  HALF_FLOAT_OES: 0x8d61,\n\n  // WEBGL_color_buffer_float\n\n  RGBA32F_EXT: 0x8814,\n  RGB32F_EXT: 0x8815,\n  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,\n  UNSIGNED_NORMALIZED_EXT: 0x8c17,\n\n  // EXT_blend_minmax\n\n  MIN_EXT: 0x8007,\n  MAX_EXT: 0x8008,\n\n  // EXT_sRGB\n\n  SRGB_EXT: 0x8c40,\n  SRGB_ALPHA_EXT: 0x8c42,\n  SRGB8_ALPHA8_EXT: 0x8c43,\n  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,\n\n  // OES_standard_derivatives\n\n  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8b8b,\n\n  // WEBGL_draw_buffers\n\n  COLOR_ATTACHMENT0_WEBGL: 0x8ce0,\n  COLOR_ATTACHMENT1_WEBGL: 0x8ce1,\n  COLOR_ATTACHMENT2_WEBGL: 0x8ce2,\n  COLOR_ATTACHMENT3_WEBGL: 0x8ce3,\n  COLOR_ATTACHMENT4_WEBGL: 0x8ce4,\n  COLOR_ATTACHMENT5_WEBGL: 0x8ce5,\n  COLOR_ATTACHMENT6_WEBGL: 0x8ce6,\n  COLOR_ATTACHMENT7_WEBGL: 0x8ce7,\n  COLOR_ATTACHMENT8_WEBGL: 0x8ce8,\n  COLOR_ATTACHMENT9_WEBGL: 0x8ce9,\n  COLOR_ATTACHMENT10_WEBGL: 0x8cea,\n  COLOR_ATTACHMENT11_WEBGL: 0x8ceb,\n  COLOR_ATTACHMENT12_WEBGL: 0x8cec,\n  COLOR_ATTACHMENT13_WEBGL: 0x8ced,\n  COLOR_ATTACHMENT14_WEBGL: 0x8cee,\n  COLOR_ATTACHMENT15_WEBGL: 0x8cef,\n  DRAW_BUFFER0_WEBGL: 0x8825,\n  DRAW_BUFFER1_WEBGL: 0x8826,\n  DRAW_BUFFER2_WEBGL: 0x8827,\n  DRAW_BUFFER3_WEBGL: 0x8828,\n  DRAW_BUFFER4_WEBGL: 0x8829,\n  DRAW_BUFFER5_WEBGL: 0x882a,\n  DRAW_BUFFER6_WEBGL: 0x882b,\n  DRAW_BUFFER7_WEBGL: 0x882c,\n  DRAW_BUFFER8_WEBGL: 0x882d,\n  DRAW_BUFFER9_WEBGL: 0x882e,\n  DRAW_BUFFER10_WEBGL: 0x882f,\n  DRAW_BUFFER11_WEBGL: 0x8830,\n  DRAW_BUFFER12_WEBGL: 0x8831,\n  DRAW_BUFFER13_WEBGL: 0x8832,\n  DRAW_BUFFER14_WEBGL: 0x8833,\n  DRAW_BUFFER15_WEBGL: 0x8834,\n  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8cdf,\n  MAX_DRAW_BUFFERS_WEBGL: 0x8824,\n\n  // OES_vertex_array_object\n\n  VERTEX_ARRAY_BINDING_OES: 0x85b5,\n\n  // EXT_disjoint_timer_query\n\n  QUERY_COUNTER_BITS_EXT: 0x8864,\n  CURRENT_QUERY_EXT: 0x8865,\n  QUERY_RESULT_EXT: 0x8866,\n  QUERY_RESULT_AVAILABLE_EXT: 0x8867,\n  TIME_ELAPSED_EXT: 0x88bf,\n  TIMESTAMP_EXT: 0x8e28,\n  GPU_DISJOINT_EXT: 0x8fbb // A Boolean indicating whether or not the GPU performed any disjoint operation.\n};\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './lib/math-array';\nimport { checkNumber } from './lib/common';\nimport * as quat from 'gl-matrix/quat';\nvar IDENTITY_QUATERNION = [0, 0, 0, 1];\nexport function validateQuaternion(q) {\n  return q.length === 4 && Number.isFinite(q[0]) && Number.isFinite(q[1]) && Number.isFinite(q[2]) && Number.isFinite(q[3]);\n}\n\nvar Quaternion = function (_MathArray) {\n  _inherits(Quaternion, _MathArray);\n\n  function Quaternion() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, Quaternion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Quaternion).call(this));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  }\n\n  _createClass(Quaternion, [{\n    key: \"fromMatrix3\",\n    value: function fromMatrix3(m) {\n      quat.fromMat3(this, m);\n      return this.check();\n    }\n  }, {\n    key: \"fromValues\",\n    value: function fromValues(x, y, z, w) {\n      return this.set(x, y, z, w);\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      quat.identity(this);\n      return this.check();\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return quat.length(this);\n    }\n  }, {\n    key: \"squaredLength\",\n    value: function squaredLength(a) {\n      return quat.squaredLength(this);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.dot only takes one argument');\n      }\n\n      return quat.dot(this, a);\n    }\n  }, {\n    key: \"rotationTo\",\n    value: function rotationTo(vectorA, vectorB) {\n      quat.rotationTo(this, vectorA, vectorB);\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.add only takes one argument');\n      }\n\n      quat.add(this, a);\n      return this.check();\n    }\n  }, {\n    key: \"calculateW\",\n    value: function calculateW() {\n      quat.calculateW(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      quat.conjugate(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      quat.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      quat.lerp(this, a, b, t);\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(a, b) {\n      if (b !== undefined) {\n        throw new Error('Quaternion.multiply only takes one argument');\n      }\n\n      quat.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      quat.normalize(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(rad) {\n      quat.rotateX(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(rad) {\n      quat.rotateY(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(rad) {\n      quat.rotateZ(this, this, rad);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(b) {\n      quat.scale(this, this, b);\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set(i, j, k, l) {\n      quat.set(this, i, j, k, l);\n      return this.check();\n    }\n  }, {\n    key: \"setAxisAngle\",\n    value: function setAxisAngle(axis, rad) {\n      quat.setAxisAngle(this, axis, rad);\n      return this.check();\n    }\n  }, {\n    key: \"slerp\",\n    value: function slerp(_ref) {\n      var _ref$start = _ref.start,\n          start = _ref$start === void 0 ? IDENTITY_QUATERNION : _ref$start,\n          target = _ref.target,\n          ratio = _ref.ratio;\n      quat.slerp(this, start, target, ratio);\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Quaternion;\n}(MathArray);\n\nexport { Quaternion as default };\n//# sourceMappingURL=quaternion.js.map","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { assert, log } from '@luma.gl/core';\nimport { Matrix4, Quaternion } from 'math.gl';\nexport var ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nexport var ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n\nfunction accessorToJsArray(accessor) {\n  if (!accessor._animation) {\n    var ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[accessor.componentType];\n    var components = ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type];\n    var length = components * accessor.count;\n    var _accessor$bufferView$ = accessor.bufferView.data,\n        buffer = _accessor$bufferView$.buffer,\n        byteOffset = _accessor$bufferView$.byteOffset;\n    var array = new ArrayType(buffer, byteOffset + (accessor.byteOffset || 0), length);\n\n    if (components === 1) {\n      accessor._animation = Array.from(array);\n    } else {\n      var slicedArray = [];\n\n      for (var i = 0; i < array.length; i += components) {\n        slicedArray.push(Array.from(array.slice(i, i + components)));\n      }\n\n      accessor._animation = slicedArray;\n    }\n  }\n\n  return accessor._animation;\n}\n\nvar helperMatrix = new Matrix4();\n\nfunction applyTranslationRotationScale(gltfNode, node) {\n  node.matrix.identity();\n\n  if (gltfNode.translation) {\n    node.matrix.translate(gltfNode.translation);\n  }\n\n  if (gltfNode.rotation) {\n    var rotationMatrix = helperMatrix.fromQuaternion(gltfNode.rotation);\n    node.matrix.multiplyRight(rotationMatrix);\n  }\n\n  if (gltfNode.scale) {\n    node.matrix.scale(gltfNode.scale);\n  }\n}\n\nvar quaternion = new Quaternion();\n\nfunction linearInterpolate(target, path, start, stop, ratio) {\n  if (path === 'rotation') {\n    quaternion.slerp({\n      start: start,\n      target: stop,\n      ratio: ratio\n    });\n\n    for (var i = 0; i < quaternion.length; i++) {\n      target[path][i] = quaternion[i];\n    }\n  } else {\n    for (var _i = 0; _i < start.length; _i++) {\n      target[path][_i] = ratio * stop[_i] + (1 - ratio) * start[_i];\n    }\n  }\n}\n\nfunction cubicsplineInterpolate(target, path, _ref) {\n  var p0 = _ref.p0,\n      outTangent0 = _ref.outTangent0,\n      inTangent1 = _ref.inTangent1,\n      p1 = _ref.p1,\n      tDiff = _ref.tDiff,\n      t = _ref.ratio;\n\n  for (var i = 0; i < target[path].length; i++) {\n    var m0 = outTangent0[i] * tDiff;\n    var m1 = inTangent1[i] * tDiff;\n    target[path][i] = (2 * Math.pow(t, 3) - 3 * Math.pow(t, 2) + 1) * p0[i] + (Math.pow(t, 3) - 2 * Math.pow(t, 2) + t) * m0 + (-2 * Math.pow(t, 3) + 3 * Math.pow(t, 2)) * p1[i] + (Math.pow(t, 3) - Math.pow(t, 2)) * m1;\n  }\n}\n\nfunction stepInterpolate(target, path, value) {\n  for (var i = 0; i < value.length; i++) {\n    target[path][i] = value[i];\n  }\n}\n\nfunction interpolate(time, _ref2, target, path) {\n  var input = _ref2.input,\n      interpolation = _ref2.interpolation,\n      output = _ref2.output;\n  var maxTime = input[input.length - 1];\n  var animationTime = time % maxTime;\n  var nextIndex = input.findIndex(function (t) {\n    return t >= animationTime;\n  });\n  var previousIndex = Math.max(0, nextIndex - 1);\n\n  if (!Array.isArray(target[path])) {\n    switch (path) {\n      case 'translation':\n        target[path] = [0, 0, 0];\n        break;\n\n      case 'rotation':\n        target[path] = [0, 0, 0, 1];\n        break;\n\n      case 'scale':\n        target[path] = [1, 1, 1];\n        break;\n\n      default:\n        log.warn(\"Bad animation path \".concat(path))();\n    }\n  }\n\n  assert(target[path].length === output[previousIndex].length);\n  var previousTime = input[previousIndex];\n  var nextTime = input[nextIndex];\n\n  switch (interpolation) {\n    case 'STEP':\n      stepInterpolate(target, path, output[previousIndex]);\n      break;\n\n    case 'LINEAR':\n      if (nextTime > previousTime) {\n        var ratio = (animationTime - previousTime) / (nextTime - previousTime);\n        linearInterpolate(target, path, output[previousIndex], output[nextIndex], ratio);\n      }\n\n      break;\n\n    case 'CUBICSPLINE':\n      if (nextTime > previousTime) {\n        var _ratio = (animationTime - previousTime) / (nextTime - previousTime);\n\n        var tDiff = nextTime - previousTime;\n        var p0 = output[3 * previousIndex + 1];\n        var outTangent0 = output[3 * previousIndex + 2];\n        var inTangent1 = output[3 * nextIndex + 0];\n        var p1 = output[3 * nextIndex + 1];\n        cubicsplineInterpolate(target, path, {\n          p0: p0,\n          outTangent0: outTangent0,\n          inTangent1: inTangent1,\n          p1: p1,\n          tDiff: tDiff,\n          ratio: _ratio\n        });\n      }\n\n      break;\n\n    default:\n      log.warn(\"Interpolation \".concat(interpolation, \" not supported\"))();\n      break;\n  }\n}\n\nvar GLTFAnimation = function () {\n  function GLTFAnimation(props) {\n    _classCallCheck(this, GLTFAnimation);\n\n    this.startTime = 0;\n    this.playing = true;\n    this.speed = 1;\n    Object.assign(this, props);\n  }\n\n  _createClass(GLTFAnimation, [{\n    key: \"animate\",\n    value: function animate(timeMs) {\n      if (!this.playing) {\n        return;\n      }\n\n      var absTime = timeMs / 1000;\n      var time = (absTime - this.startTime) * this.speed;\n      this.channels.forEach(function (_ref3) {\n        var sampler = _ref3.sampler,\n            target = _ref3.target,\n            path = _ref3.path;\n        interpolate(time, sampler, target, path);\n        applyTranslationRotationScale(target, target._node);\n      });\n    }\n  }]);\n\n  return GLTFAnimation;\n}();\n\nvar GLTFAnimator = function () {\n  function GLTFAnimator(gltf) {\n    _classCallCheck(this, GLTFAnimator);\n\n    this.animations = gltf.animations.map(function (animation, index) {\n      var name = animation.name || \"Animation-\".concat(index);\n      var samplers = animation.samplers.map(function (_ref4) {\n        var input = _ref4.input,\n            _ref4$interpolation = _ref4.interpolation,\n            interpolation = _ref4$interpolation === void 0 ? 'LINEAR' : _ref4$interpolation,\n            output = _ref4.output;\n        return {\n          input: accessorToJsArray(gltf.accessors[input]),\n          interpolation: interpolation,\n          output: accessorToJsArray(gltf.accessors[output])\n        };\n      });\n      var channels = animation.channels.map(function (_ref5) {\n        var sampler = _ref5.sampler,\n            target = _ref5.target;\n        return {\n          sampler: samplers[sampler],\n          target: gltf.nodes[target.node],\n          path: target.path\n        };\n      });\n      return new GLTFAnimation({\n        name: name,\n        channels: channels\n      });\n    });\n  }\n\n  _createClass(GLTFAnimator, [{\n    key: \"animate\",\n    value: function animate(timeMs) {\n      this.animations.forEach(function (animation) {\n        return animation.animate(timeMs);\n      });\n    }\n  }, {\n    key: \"getAnimations\",\n    value: function getAnimations() {\n      return this.animations;\n    }\n  }]);\n\n  return GLTFAnimator;\n}();\n\nexport { GLTFAnimator as default };\n//# sourceMappingURL=gltf-animator.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Texture2D, log } from '@luma.gl/core';\n\nvar GLTFMaterialParser = function () {\n  function GLTFMaterialParser(gl, _ref) {\n    var attributes = _ref.attributes,\n        material = _ref.material,\n        pbrDebug = _ref.pbrDebug,\n        imageBasedLightingEnvironment = _ref.imageBasedLightingEnvironment,\n        lights = _ref.lights;\n\n    _classCallCheck(this, GLTFMaterialParser);\n\n    this.gl = gl;\n    this.defines = {\n      USE_TEX_LOD: 1,\n      MANUAL_SRGB: 1,\n      SRGB_FAST_APPROXIMATION: 1\n    };\n    this.uniforms = {\n      u_Camera: [0, 0, 0],\n      u_MetallicRoughnessValues: [1, 1]\n    };\n    this.parameters = {};\n    this.generatedTextures = [];\n\n    if (imageBasedLightingEnvironment) {\n      this.uniforms.u_DiffuseEnvSampler = imageBasedLightingEnvironment.getDiffuseEnvSampler();\n      this.uniforms.u_SpecularEnvSampler = imageBasedLightingEnvironment.getSpecularEnvSampler();\n      this.uniforms.u_brdfLUT = imageBasedLightingEnvironment.getBrdfTexture();\n      this.uniforms.u_ScaleIBLAmbient = [1, 1];\n    }\n\n    if (pbrDebug) {\n      this.uniforms.u_ScaleDiffBaseMR = [0, 0, 0, 0];\n      this.uniforms.u_ScaleFGDSpec = [0, 0, 0, 0];\n    }\n\n    this.defineIfPresent(attributes.NORMAL, 'HAS_NORMALS');\n    this.defineIfPresent(attributes.TANGENT, 'HAS_TANGENTS');\n    this.defineIfPresent(attributes.TEXCOORD_0, 'HAS_UV');\n    this.defineIfPresent(imageBasedLightingEnvironment, 'USE_IBL');\n    this.defineIfPresent(lights, 'USE_LIGHTS');\n    this.defineIfPresent(pbrDebug, 'PBR_DEBUG');\n\n    if (material) {\n      this.parseMaterial(material);\n    }\n  }\n\n  _createClass(GLTFMaterialParser, [{\n    key: \"defineIfPresent\",\n    value: function defineIfPresent(value, name) {\n      if (value) {\n        this.defines[name] = 1;\n      }\n    }\n  }, {\n    key: \"parseTexture\",\n    value: function parseTexture(gltfTexture, name) {\n      var define = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var parameters = gltfTexture.texture && gltfTexture.texture.sampler && gltfTexture.texture.sampler.parameters || {};\n      var texture = new Texture2D(this.gl, {\n        id: gltfTexture.name || gltfTexture.id,\n        parameters: parameters,\n        pixelStore: _defineProperty({}, this.gl.UNPACK_FLIP_Y_WEBGL, false),\n        data: gltfTexture.texture.source.getImageAsync()\n      });\n      this.uniforms[name] = texture;\n      this.defineIfPresent(define, define);\n      this.generatedTextures.push(texture);\n    }\n  }, {\n    key: \"parsePbrMetallicRoughness\",\n    value: function parsePbrMetallicRoughness(pbrMetallicRoughness) {\n      if (pbrMetallicRoughness.baseColorTexture) {\n        this.parseTexture(pbrMetallicRoughness.baseColorTexture, 'u_BaseColorSampler', 'HAS_BASECOLORMAP');\n      }\n\n      this.uniforms.u_BaseColorFactor = pbrMetallicRoughness.baseColorFactor || [1, 1, 1, 1];\n\n      if (pbrMetallicRoughness.metallicRoughnessTexture) {\n        this.parseTexture(pbrMetallicRoughness.metallicRoughnessTexture, 'u_MetallicRoughnessSampler', 'HAS_METALROUGHNESSMAP');\n      }\n\n      var _pbrMetallicRoughness = pbrMetallicRoughness.metallicFactor,\n          metallicFactor = _pbrMetallicRoughness === void 0 ? 1 : _pbrMetallicRoughness,\n          _pbrMetallicRoughness2 = pbrMetallicRoughness.roughnessFactor,\n          roughnessFactor = _pbrMetallicRoughness2 === void 0 ? 1 : _pbrMetallicRoughness2;\n      this.uniforms.u_MetallicRoughnessValues = [metallicFactor, roughnessFactor];\n    }\n  }, {\n    key: \"parseMaterial\",\n    value: function parseMaterial(material) {\n      if (material.pbrMetallicRoughness) {\n        this.parsePbrMetallicRoughness(material.pbrMetallicRoughness);\n      }\n\n      if (material.normalTexture) {\n        this.parseTexture(material.normalTexture, 'u_NormalSampler', 'HAS_NORMALMAP');\n        var _material$normalTextu = material.normalTexture.scale,\n            scale = _material$normalTextu === void 0 ? 1 : _material$normalTextu;\n        this.uniforms.u_NormalScale = scale;\n      }\n\n      if (material.occlusionTexture) {\n        this.parseTexture(material.occlusionTexture, 'u_OcclusionSampler', 'HAS_OCCLUSIONMAP');\n        var _material$occlusionTe = material.occlusionTexture.strength,\n            strength = _material$occlusionTe === void 0 ? 1 : _material$occlusionTe;\n        this.uniforms.u_OcclusionStrength = strength;\n      }\n\n      if (material.emissiveTexture) {\n        this.parseTexture(material.emissiveTexture, 'u_EmissiveSampler', 'HAS_EMISSIVEMAP');\n        this.uniforms.u_EmissiveFactor = material.emissiveFactor || [0, 0, 0];\n      }\n\n      if (material.alphaMode === 'MASK') {\n        var _material$alphaCutoff = material.alphaCutoff,\n            alphaCutoff = _material$alphaCutoff === void 0 ? 0.5 : _material$alphaCutoff;\n        this.defines.ALPHA_CUTOFF = 1;\n        this.uniforms.u_AlphaCutoff = alphaCutoff;\n      } else if (material.alphaMode === 'BLEND') {\n        log.warn('BLEND alphaMode might not work well because it requires mesh sorting')();\n        Object.assign(this.parameters, {\n          blend: true,\n          blendEquation: this.gl.FUNC_ADD,\n          blendFunc: [this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA]\n        });\n      }\n    }\n  }]);\n\n  return GLTFMaterialParser;\n}();\n\nexport { GLTFMaterialParser as default };\n//# sourceMappingURL=gltf-material-parser.js.map","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { isWebGL2, ModelNode, log, pbr } from '@luma.gl/core';\nimport GLTFMaterialParser from './gltf-material-parser';\nvar vs = \"\\n#if (__VERSION__ < 300)\\n  #define _attr attribute\\n#else\\n  #define _attr in\\n#endif\\n\\n  _attr vec4 POSITION;\\n\\n  #ifdef HAS_NORMALS\\n    _attr vec4 NORMAL;\\n  #endif\\n\\n  #ifdef HAS_TANGENTS\\n    _attr vec4 TANGENT;\\n  #endif\\n\\n  #ifdef HAS_UV\\n    _attr vec2 TEXCOORD_0;\\n  #endif\\n\\n  void main(void) {\\n    vec4 _NORMAL = vec4(0.);\\n    vec4 _TANGENT = vec4(0.);\\n    vec2 _TEXCOORD_0 = vec2(0.);\\n\\n    #ifdef HAS_NORMALS\\n      _NORMAL = NORMAL;\\n    #endif\\n\\n    #ifdef HAS_TANGENTS\\n      _TANGENT = TANGENT;\\n    #endif\\n\\n    #ifdef HAS_UV\\n      _TEXCOORD_0 = TEXCOORD_0;\\n    #endif\\n\\n    pbr_setPositionNormalTangentUV(POSITION, _NORMAL, _TANGENT, _TEXCOORD_0);\\n    gl_Position = u_MVPMatrix * POSITION;\\n  }\\n\";\nvar fs = \"\\n#if (__VERSION__ < 300)\\n  #define fragmentColor gl_FragColor\\n#else\\n  out vec4 fragmentColor;\\n#endif\\n\\n  void main(void) {\\n    fragmentColor = pbr_filterColor(vec4(0));\\n  }\\n\";\n\nfunction addVersionToShader(gl, source) {\n  if (isWebGL2(gl)) {\n    return \"#version 300 es\\n\".concat(source);\n  }\n\n  return source;\n}\n\nexport default function createGLTFModel(gl, options) {\n  var id = options.id,\n      drawMode = options.drawMode,\n      vertexCount = options.vertexCount,\n      attributes = options.attributes,\n      modelOptions = options.modelOptions;\n  var materialParser = new GLTFMaterialParser(gl, options);\n  log.info(4, 'createGLTFModel defines: ', materialParser.defines)();\n  var managedResources = [];\n  managedResources.push.apply(managedResources, _toConsumableArray(materialParser.generatedTextures));\n  managedResources.push.apply(managedResources, _toConsumableArray(Object.values(attributes).map(function (attribute) {\n    return attribute.buffer;\n  })));\n  var model = new ModelNode(gl, Object.assign({\n    id: id,\n    drawMode: drawMode,\n    vertexCount: vertexCount,\n    modules: [pbr],\n    defines: materialParser.defines,\n    parameters: materialParser.parameters,\n    vs: addVersionToShader(gl, vs),\n    fs: addVersionToShader(gl, fs),\n    managedResources: managedResources\n  }, modelOptions));\n  model.setProps({\n    attributes: attributes\n  });\n  model.setUniforms(materialParser.uniforms);\n  return model;\n}\n//# sourceMappingURL=create-gltf-model.js.map","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Matrix4 } from 'math.gl';\nimport { Buffer, _Accessor as Accessor, GroupNode, log } from '@luma.gl/core';\nimport GLTFAnimator from './gltf-animator';\nimport createGLTFModel from './create-gltf-model';\nvar ATTRIBUTE_TYPE_TO_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\nvar DEFAULT_OPTIONS = {\n  modelOptions: {},\n  pbrDebug: false,\n  imageBasedLightingEnvironment: null,\n  lights: true\n};\n\nvar GLTFInstantiator = function () {\n  function GLTFInstantiator(gl) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, GLTFInstantiator);\n\n    this.gl = gl;\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n  }\n\n  _createClass(GLTFInstantiator, [{\n    key: \"instantiate\",\n    value: function instantiate(gltf) {\n      var _this = this;\n\n      this.gltf = gltf;\n      var scenes = (gltf.scenes || []).map(function (scene) {\n        return _this.createScene(scene);\n      });\n      return scenes;\n    }\n  }, {\n    key: \"createAnimator\",\n    value: function createAnimator() {\n      if (Array.isArray(this.gltf.animations)) {\n        return new GLTFAnimator(this.gltf);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"createScene\",\n    value: function createScene(gltfScene) {\n      var _this2 = this;\n\n      var gltfNodes = gltfScene.nodes || [];\n      var nodes = gltfNodes.map(function (node) {\n        return _this2.createNode(node);\n      });\n      var scene = new GroupNode({\n        id: gltfScene.name || gltfScene.id,\n        children: nodes\n      });\n      return scene;\n    }\n  }, {\n    key: \"createNode\",\n    value: function createNode(gltfNode) {\n      var _this3 = this;\n\n      if (!gltfNode._node) {\n        var gltfChildren = gltfNode.children || [];\n        var children = gltfChildren.map(function (child) {\n          return _this3.createNode(child);\n        });\n\n        if (gltfNode.mesh) {\n          children.push(this.createMesh(gltfNode.mesh));\n        }\n\n        var node = new GroupNode({\n          id: gltfNode.name || gltfNode.id,\n          children: children\n        });\n\n        if (gltfNode.matrix) {\n          node.setMatrix(gltfNode.matrix);\n        } else {\n          node.matrix.identity();\n\n          if (gltfNode.translation) {\n            node.matrix.translate(gltfNode.translation);\n          }\n\n          if (gltfNode.rotation) {\n            var rotationMatrix = new Matrix4().fromQuaternion(gltfNode.rotation);\n            node.matrix.multiplyRight(rotationMatrix);\n          }\n\n          if (gltfNode.scale) {\n            node.matrix.scale(gltfNode.scale);\n          }\n        }\n\n        gltfNode._node = node;\n      }\n\n      return gltfNode._node;\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh(gltfMesh) {\n      var _this4 = this;\n\n      if (!gltfMesh._mesh) {\n        var gltfPrimitives = gltfMesh.primitives || [];\n        var primitives = gltfPrimitives.map(function (gltfPrimitive, i) {\n          return _this4.createPrimitive(gltfPrimitive, i, gltfMesh);\n        });\n        var mesh = new GroupNode({\n          id: gltfMesh.name || gltfMesh.id,\n          children: primitives\n        });\n        gltfMesh._mesh = mesh;\n      }\n\n      return gltfMesh._mesh;\n    }\n  }, {\n    key: \"getVertexCount\",\n    value: function getVertexCount(attributes) {\n      log.warn('getVertexCount() not found')();\n    }\n  }, {\n    key: \"createPrimitive\",\n    value: function createPrimitive(gltfPrimitive, i, gltfMesh) {\n      return createGLTFModel(this.gl, Object.assign({\n        id: gltfPrimitive.name || \"\".concat(gltfMesh.name || gltfMesh.id, \"-primitive-\").concat(i),\n        drawMode: gltfPrimitive.mode || 4,\n        vertexCount: gltfPrimitive.indices ? gltfPrimitive.indices.count : this.getVertexCount(gltfPrimitive.attributes),\n        attributes: this.createAttributes(gltfPrimitive.attributes, gltfPrimitive.indices),\n        material: gltfPrimitive.material\n      }, this.options));\n    }\n  }, {\n    key: \"createAttributes\",\n    value: function createAttributes(attributes, indices) {\n      var _this5 = this;\n\n      var loadedAttributes = {};\n      Object.keys(attributes).forEach(function (attrName) {\n        loadedAttributes[attrName] = _this5.createAccessor(attributes[attrName], _this5.createBuffer(attributes[attrName], _this5.gl.ARRAY_BUFFER));\n      });\n\n      if (indices) {\n        loadedAttributes.indices = this.createAccessor(indices, this.createBuffer(indices, this.gl.ELEMENT_ARRAY_BUFFER));\n      }\n\n      log.info(4, 'glTF Attributes', {\n        attributes: attributes,\n        indices: indices,\n        generated: loadedAttributes\n      })();\n      return loadedAttributes;\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function createBuffer(attribute, target) {\n      if (!attribute.bufferView) {\n        attribute.bufferView = {};\n      }\n\n      var bufferView = attribute.bufferView;\n\n      if (!bufferView.lumaBuffers) {\n        bufferView.lumaBuffers = {};\n      }\n\n      if (!bufferView.lumaBuffers[target]) {\n        bufferView.lumaBuffers[target] = new Buffer(this.gl, {\n          id: \"from-\".concat(bufferView.id),\n          data: bufferView.data || attribute.value,\n          target: target\n        });\n      }\n\n      return bufferView.lumaBuffers[target];\n    }\n  }, {\n    key: \"createAccessor\",\n    value: function createAccessor(accessor, buffer) {\n      return new Accessor({\n        buffer: buffer,\n        offset: accessor.byteOffset || 0,\n        stride: accessor.bufferView.byteStride || 0,\n        type: accessor.componentType,\n        size: ATTRIBUTE_TYPE_TO_COMPONENTS[accessor.type]\n      });\n    }\n  }, {\n    key: \"createSampler\",\n    value: function createSampler(gltfSampler) {\n      return gltfSampler;\n    }\n  }, {\n    key: \"needsPOT\",\n    value: function needsPOT() {\n      return false;\n    }\n  }]);\n\n  return GLTFInstantiator;\n}();\n\nexport { GLTFInstantiator as default };\n//# sourceMappingURL=gltf-instantiator.js.map","import GLTFInstantiator from './gltf-instantiator';\nexport default function createGLTFObjects(gl, gltf, options) {\n  var instantiator = new GLTFInstantiator(gl, options);\n  var scenes = instantiator.instantiate(gltf);\n  var animator = instantiator.createAnimator();\n  return {\n    scenes: scenes,\n    animator: animator\n  };\n}\n//# sourceMappingURL=create-gltf-objects.js.map","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar DEFAULT_CSS = {\n  css: {\n    position: 'fixed',\n    zIndex: 10000,\n    color: '#ccc',\n    background: '#000',\n    fontFamily: 'Helvetica,Arial,sans-serif',\n    padding: '8px',\n    fontSize: '12px',\n    lineSpacing: 6\n  },\n  headerCSS: {\n    fontSize: '16px'\n  },\n  itemCSS: {\n    paddingLeft: '8px'\n  }\n};\nvar DEFAULT_FORMATTERS = {\n  count: function count(stat) {\n    return \"\".concat(stat.name, \": \").concat(stat.count);\n  },\n  averageTime: function averageTime(stat) {\n    return \"\".concat(stat.name, \": \").concat(formatTime(stat.getAverageTime()));\n  },\n  totalTime: function totalTime(stat) {\n    return \"\".concat(stat.name, \": \").concat(formatTime(stat.time));\n  },\n  fps: function fps(stat) {\n    return \"\".concat(stat.name, \": \").concat(Math.round(stat.getHz()), \"fps\");\n  },\n  memory: function memory(stat) {\n    return \"\".concat(stat.name, \": \").concat(formatMemory(stat.count));\n  }\n};\nvar KB = 1024;\nvar MB = 1024 * KB;\nvar GB = 1024 * MB;\n\nvar StatsWidget = function () {\n  function StatsWidget(stats) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, StatsWidget);\n\n    this.title = opts.title || null;\n    this.stats = stats;\n    this._css = Object.assign({}, DEFAULT_CSS.css, opts.css);\n    this._headerCSS = Object.assign({}, DEFAULT_CSS.headerCSS, this._css.header);\n    this._itemCSS = Object.assign({}, DEFAULT_CSS.itemCSS, this._css.item);\n    delete this._css.header;\n    delete this._css.item;\n    this._container = null;\n    this._header = null;\n    this._items = {};\n    this._counter = 0;\n    this._framesPerUpdate = Math.round(Math.max(opts.framesPerUpdate || 1, 1));\n    this._formatters = {};\n    this._resetOnUpdate = {};\n\n    if (opts.formatters) {\n      for (var name in opts.formatters) {\n        var fm = opts.formatters[name];\n\n        if (typeof fm === 'string') {\n          fm = DEFAULT_FORMATTERS[fm];\n        }\n\n        this._formatters[name] = fm;\n      }\n    }\n\n    if (opts.resetOnUpdate) {\n      for (var _name in opts.resetOnUpdate) {\n        this._resetOnUpdate[_name] = opts.resetOnUpdate[_name];\n      }\n    }\n\n    this._createDOM(opts.container);\n  }\n\n  _createClass(StatsWidget, [{\n    key: \"update\",\n    value: function update() {\n      var _this = this;\n\n      if (this._counter++ % this._framesPerUpdate !== 0) {\n        return;\n      }\n\n      this.stats.forEach(function (stat) {\n        _this._createDOMItem(stat.name);\n\n        _this._items[stat.name].innerHTML = _this._getLines(stat.name).join('<BR>');\n\n        if (_this._resetOnUpdate[stat.name]) {\n          stat.reset();\n        }\n      });\n    }\n  }, {\n    key: \"_createDOM\",\n    value: function _createDOM(container) {\n      var _this2 = this;\n\n      this._container = container;\n\n      if (!this._container) {\n        this._container = document.createElement('div');\n\n        for (var name in this._css) {\n          this._container.style[name] = this._css[name];\n        }\n\n        document.body.appendChild(this._container);\n      }\n\n      this._header = document.createElement('div');\n      this._header.innerText = this.title || this.stats.id;\n\n      for (var _name2 in this._headerCSS) {\n        this._header.style[_name2] = this._headerCSS[_name2];\n      }\n\n      this._container.appendChild(this._header);\n\n      this.stats.forEach(function (stat) {\n        _this2._createDOMItem(stat.name);\n      });\n    }\n  }, {\n    key: \"_createDOMItem\",\n    value: function _createDOMItem(statName) {\n      if (this._items[statName]) {\n        return;\n      }\n\n      this._items[statName] = document.createElement('div');\n\n      for (var name in this._itemCSS) {\n        this._items[statName].style[name] = this._itemCSS[name];\n      }\n\n      this._container.appendChild(this._items[statName]);\n    }\n  }, {\n    key: \"_getLines\",\n    value: function _getLines(name) {\n      var formatter = this._formatters[name] || DEFAULT_FORMATTERS.count;\n      return formatter(this.stats.get(name)).split('\\n');\n    }\n  }]);\n\n  return StatsWidget;\n}();\n\nexport { StatsWidget as default };\n\nfunction formatTime(t) {\n  var value;\n  var unit;\n  var precision;\n\n  if (t < 1) {\n    value = t * 1000;\n    unit = \"\\u03BCs\";\n    precision = 0;\n  } else if (t < 1000) {\n    value = t;\n    unit = 'ms';\n    precision = 2;\n  } else {\n    value = t / 1000;\n    unit = 's';\n    precision = 2;\n  }\n\n  return \"\".concat(value.toFixed(precision)).concat(unit);\n}\n\nfunction formatMemory(b) {\n  var value;\n  var unit;\n  var precision;\n\n  if (b < KB) {\n    value = b;\n    unit = ' bytes';\n    precision = 0;\n  } else if (b < MB) {\n    value = b / KB;\n    unit = 'kB';\n    precision = 2;\n  } else if (b < GB) {\n    value = b / MB;\n    unit = 'MB';\n    precision = 2;\n  } else {\n    value = b / GB;\n    unit = 'GB';\n    precision = 2;\n  }\n\n  return \"\".concat(value.toFixed(precision)).concat(unit);\n}\n//# sourceMappingURL=stats-widget.js.map","import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { assert } from '@luma.gl/core';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport createGLTFObjects from './create-gltf-objects';\n\nfunction parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, options, uri, loader) {\n    var gltf, gltfObjects;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            assert(options.gl);\n            _context.next = 3;\n            return GLTFLoader.parse(data, _objectSpread({}, options, {\n              uri: uri,\n              decompress: true\n            }));\n\n          case 3:\n            gltf = _context.sent;\n            gltfObjects = createGLTFObjects(options.gl, gltf, options);\n\n            if (!options.waitForFullLoad) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 8;\n            return waitForGLTFAssets(gltfObjects);\n\n          case 8:\n            return _context.abrupt(\"return\", Object.assign({\n              gltf: gltf\n            }, gltfObjects));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nfunction waitForGLTFAssets(_x5) {\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction _waitForGLTFAssets() {\n  _waitForGLTFAssets = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(gltfObjects) {\n    var remaining;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            remaining = [];\n            gltfObjects.scenes.forEach(function (scene) {\n              scene.traverse(function (model) {\n                Object.values(model.model.program.uniforms).forEach(function (uniform) {\n                  if (uniform.loaded === false) {\n                    remaining.push(uniform);\n                  }\n                });\n              });\n            });\n            _context2.next = 4;\n            return waitWhileCondition(function () {\n              return remaining.some(function (uniform) {\n                return !uniform.loaded;\n              });\n            });\n\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _waitForGLTFAssets.apply(this, arguments);\n}\n\nfunction waitWhileCondition(_x6) {\n  return _waitWhileCondition.apply(this, arguments);\n}\n\nfunction _waitWhileCondition() {\n  _waitWhileCondition = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(condition) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!condition()) {\n              _context3.next = 5;\n              break;\n            }\n\n            _context3.next = 3;\n            return new Promise(function (resolve) {\n              return window.requestAnimationFrame(resolve);\n            });\n\n          case 3:\n            _context3.next = 0;\n            break;\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _waitWhileCondition.apply(this, arguments);\n}\n\nexport default {\n  name: 'GLTF Scenegraph Loader',\n  extensions: ['gltf', 'glb'],\n  parse: parse\n};\n//# sourceMappingURL=gltf-scenegraph-loader.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Texture2D, TextureCube, loadImage } from '@luma.gl/core';\n\nvar GLTFEnvironment = function () {\n  function GLTFEnvironment(gl, _ref) {\n    var brdfLutUrl = _ref.brdfLutUrl,\n        getTexUrl = _ref.getTexUrl;\n\n    _classCallCheck(this, GLTFEnvironment);\n\n    this.gl = gl;\n    this.brdfLutUrl = brdfLutUrl;\n    this.getTexUrl = getTexUrl;\n  }\n\n  _createClass(GLTFEnvironment, [{\n    key: \"makeCube\",\n    value: function makeCube(_ref2) {\n      var id = _ref2.id,\n          getTextureForFace = _ref2.getTextureForFace,\n          parameters = _ref2.parameters;\n      var pixels = {};\n      TextureCube.FACES.forEach(function (face) {\n        pixels[face] = getTextureForFace(face);\n      });\n      return new TextureCube(this.gl, {\n        id: id,\n        mipmaps: false,\n        parameters: parameters,\n        pixels: pixels\n      });\n    }\n  }, {\n    key: \"getDiffuseEnvSampler\",\n    value: function getDiffuseEnvSampler() {\n      var _this = this;\n\n      if (!this._DiffuseEnvSampler) {\n        var _parameters;\n\n        this._DiffuseEnvSampler = this.makeCube({\n          id: 'DiffuseEnvSampler',\n          getTextureForFace: function getTextureForFace(dir) {\n            return loadImage(_this.getTexUrl('diffuse', dir, 0));\n          },\n          parameters: (_parameters = {}, _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _defineProperty(_parameters, 10241, 9729), _defineProperty(_parameters, 10240, 9729), _parameters)\n        });\n      }\n\n      return this._DiffuseEnvSampler;\n    }\n  }, {\n    key: \"getSpecularEnvSampler\",\n    value: function getSpecularEnvSampler() {\n      var _this2 = this;\n\n      if (!this._SpecularEnvSampler) {\n        var _parameters2;\n\n        this._SpecularEnvSampler = this.makeCube({\n          id: 'SpecularEnvSampler',\n          getTextureForFace: function getTextureForFace(dir) {\n            var imageArray = [];\n\n            for (var lod = 0; lod <= 9; lod++) {\n              imageArray.push(loadImage(_this2.getTexUrl('specular', dir, lod)));\n            }\n\n            return imageArray;\n          },\n          parameters: (_parameters2 = {}, _defineProperty(_parameters2, 10242, 33071), _defineProperty(_parameters2, 10243, 33071), _defineProperty(_parameters2, 10241, 9987), _defineProperty(_parameters2, 10240, 9729), _parameters2)\n        });\n      }\n\n      return this._SpecularEnvSampler;\n    }\n  }, {\n    key: \"getBrdfTexture\",\n    value: function getBrdfTexture() {\n      if (!this._BrdfTexture) {\n        var _parameters3;\n\n        this._BrdfTexture = new Texture2D(this.gl, {\n          id: 'brdfLUT',\n          parameters: (_parameters3 = {}, _defineProperty(_parameters3, 10242, 33071), _defineProperty(_parameters3, 10243, 33071), _defineProperty(_parameters3, 10241, 9729), _defineProperty(_parameters3, 10240, 9729), _parameters3),\n          pixelStore: _defineProperty({}, this.gl.UNPACK_FLIP_Y_WEBGL, false),\n          data: loadImage(this.brdfLutUrl)\n        });\n      }\n\n      return this._BrdfTexture;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      if (this._DiffuseEnvSampler) {\n        this._DiffuseEnvSampler[\"delete\"]();\n\n        this._DiffuseEnvSampler = null;\n      }\n\n      if (this._SpecularEnvSampler) {\n        this._SpecularEnvSampler[\"delete\"]();\n\n        this._SpecularEnvSampler = null;\n      }\n\n      if (this._BrdfTexture) {\n        this._BrdfTexture[\"delete\"]();\n\n        this._BrdfTexture = null;\n      }\n    }\n  }]);\n\n  return GLTFEnvironment;\n}();\n\nexport { GLTFEnvironment as default };\n//# sourceMappingURL=gltf-environment.js.map","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\n\nfunction _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    var instance = Reflect.construct(cls, Array.from(arguments));\n    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n    return instance;\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nimport { config, formatValue, equals as _equals } from './common';\n\nvar MathArray = function (_extendableBuiltin2) {\n  _inherits(MathArray, _extendableBuiltin2);\n\n  function MathArray() {\n    _classCallCheck(this, MathArray);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MathArray).apply(this, arguments));\n  }\n\n  _createClass(MathArray, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this).check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = (i < 0 || arguments.length <= i ? undefined : arguments[i]) || 0;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = array[i + offset];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.formatString(config);\n    }\n  }, {\n    key: \"formatString\",\n    value: function formatString(opts) {\n      var string = '';\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n      }\n\n      return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        array[offset + i] = this[i];\n      }\n\n      return array;\n    }\n  }, {\n    key: \"toFloat32Array\",\n    value: function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (!_equals(this[i], array[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"exactEquals\",\n    value: function exactEquals(array) {\n      if (!array || this.length !== array.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        if (this[i] !== array[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = -this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"inverse\",\n    value: function inverse() {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = 1 / this[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lerp\",\n    value: function lerp(a, b, t) {\n      if (t === undefined) {\n        t = b;\n        b = a;\n        a = this;\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var ai = a[i];\n        this[i] = ai + t * (b[i] - ai);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"min\",\n    value: function min(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"max\",\n    value: function max(vector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.max(vector[i], this[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"clamp\",\n    value: function clamp(minVector, maxVector) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n      var valid = array && array.length === this.ELEMENTS;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        valid = valid && Number.isFinite(array[i]);\n      }\n\n      return valid;\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n\n      if (config.debug && !this.validate(array)) {\n        throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(a) {\n      return this.subtract(a);\n    }\n  }, {\n    key: \"setScalar\",\n    value: function setScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"addScalar\",\n    value: function addScalar(a) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += a;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subScalar\",\n    value: function subScalar(a) {\n      return this.addScalar(-a);\n    }\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(a) {\n      return this.scale(a);\n    }\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(a) {\n      return this.scale(1 / a);\n    }\n  }, {\n    key: \"clampScalar\",\n    value: function clampScalar(min, max) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = Math.min(Math.max(this[i], min), max);\n      }\n\n      return this.check();\n    }\n  }]);\n\n  return MathArray;\n}(_extendableBuiltin(Array));\n\nexport { MathArray as default };\n//# sourceMappingURL=math-array.js.map","export function validateVector(v, length) {\n  if (v.length !== length) {\n    return false;\n  }\n\n  return v.every(Number.isFinite);\n}\n//# sourceMappingURL=validators.js.map","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './math-array';\nimport { checkNumber } from './common';\n\nvar assert = function assert(x, m) {\n  if (!x) {\n    throw new Error(m);\n  }\n};\n\nvar Vector = function (_MathArray) {\n  _inherits(Vector, _MathArray);\n\n  function Vector() {\n    _classCallCheck(this, Vector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Vector).apply(this, arguments));\n  }\n\n  _createClass(Vector, [{\n    key: \"len\",\n    value: function len() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"magnitude\",\n    value: function magnitude() {\n      return Math.sqrt(this.lengthSquared());\n    }\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        length += this[i] * this[i];\n      }\n\n      return length;\n    }\n  }, {\n    key: \"distance\",\n    value: function distance(mathArray) {\n      return Math.sqrt(this.distanceSquared(mathArray));\n    }\n  }, {\n    key: \"distanceSquared\",\n    value: function distanceSquared(mathArray) {\n      var length = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        var dist = this[i] - mathArray[i];\n        length += dist * dist;\n      }\n\n      return checkNumber(length);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(mathArray) {\n      var product = 0;\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        product += this[i] * mathArray[i];\n      }\n\n      return checkNumber(product);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var length = this.magnitude();\n\n      if (length !== 0) {\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= length;\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n        vectors[_key] = arguments[_key];\n      }\n\n      for (var _i = 0; _i < vectors.length; _i++) {\n        var vector = vectors[_i];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] += vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0; _i2 < vectors.length; _i2++) {\n        var vector = vectors[_i2];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] -= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply() {\n      for (var _len3 = arguments.length, vectors = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        vectors[_key3] = arguments[_key3];\n      }\n\n      for (var _i3 = 0; _i3 < vectors.length; _i3++) {\n        var vector = vectors[_i3];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] *= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"divide\",\n    value: function divide() {\n      for (var _len4 = arguments.length, vectors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        vectors[_key4] = arguments[_key4];\n      }\n\n      for (var _i4 = 0; _i4 < vectors.length; _i4++) {\n        var vector = vectors[_i4];\n\n        for (var i = 0; i < this.ELEMENTS; ++i) {\n          this[i] /= vector[i];\n        }\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      if (Array.isArray(_scale)) {\n        return this.multiply(_scale);\n      }\n\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= _scale;\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"scaleAndAdd\",\n    value: function scaleAndAdd(vector, scale) {\n      for (var i = 0; i < this.ELEMENTS; ++i) {\n        this[i] = this[i] * scale + vector[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.lengthSquared();\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(vector) {\n      return this.distance(vector);\n    }\n  }, {\n    key: \"distanceToSquared\",\n    value: function distanceToSquared(vector) {\n      return this.distanceSquared(vector);\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(i) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      return checkNumber(this[i]);\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(i, value) {\n      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');\n      this[i] = value;\n      return this.check();\n    }\n  }, {\n    key: \"addVectors\",\n    value: function addVectors(a, b) {\n      return this.copy(a).add(b);\n    }\n  }, {\n    key: \"subVectors\",\n    value: function subVectors(a, b) {\n      return this.copy(a).subtract(b);\n    }\n  }, {\n    key: \"multiplyVectors\",\n    value: function multiplyVectors(a, b) {\n      return this.copy(a).multiply(b);\n    }\n  }, {\n    key: \"addScaledVector\",\n    value: function addScaledVector(a, b) {\n      return this.add(new this.constructor(a).multiplyScalar(b));\n    }\n  }, {\n    key: \"x\",\n    get: function get() {\n      return this[0];\n    },\n    set: function set(value) {\n      return this[0] = checkNumber(value);\n    }\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this[1];\n    },\n    set: function set(value) {\n      return this[1] = checkNumber(value);\n    }\n  }]);\n\n  return Vector;\n}(MathArray);\n\nexport { Vector as default };\n//# sourceMappingURL=vector.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './lib/vector';\nimport * as vec2 from 'gl-matrix/vec2';\n\nvar Vector2 = function (_Vector) {\n  _inherits(Vector2, _Vector);\n\n  function Vector2() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, Vector2);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector2).call(this));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y);\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector2, [{\n    key: \"cross\",\n    value: function cross(vector) {\n      vec2.cross(this, this, vector);\n      return this.check();\n    }\n  }, {\n    key: \"horizontalAngle\",\n    value: function horizontalAngle() {\n      return Math.atan2(this.y, this.x);\n    }\n  }, {\n    key: \"verticalAngle\",\n    value: function verticalAngle() {\n      return Math.atan2(this.x, this.y);\n    }\n  }, {\n    key: \"operation\",\n    value: function operation(_operation) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _operation.apply(void 0, [this, this].concat(args));\n\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 2;\n    }\n  }]);\n\n  return Vector2;\n}(Vector);\n\nexport { Vector2 as default };\n//# sourceMappingURL=vector2.js.map","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './lib/vector';\nimport { checkNumber } from './lib/common';\nimport * as vec3 from 'gl-matrix/vec3';\nvar ORIGIN = [0, 0, 0];\n\nvar Vector3 = function (_Vector) {\n  _inherits(Vector3, _Vector);\n\n  function Vector3() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, Vector3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector3).call(this));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z);\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector3, [{\n    key: \"angle\",\n    value: function angle(vector) {\n      return vec3.angle(this, vector);\n    }\n  }, {\n    key: \"cross\",\n    value: function cross(vector) {\n      vec3.cross(this, this, vector);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(_ref) {\n      var radians = _ref.radians,\n          _ref$origin = _ref.origin,\n          origin = _ref$origin === void 0 ? ORIGIN : _ref$origin;\n      vec3.rotateX(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(_ref2) {\n      var radians = _ref2.radians,\n          _ref2$origin = _ref2.origin,\n          origin = _ref2$origin === void 0 ? ORIGIN : _ref2$origin;\n      vec3.rotateY(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(_ref3) {\n      var radians = _ref3.radians,\n          _ref3$origin = _ref3.origin,\n          origin = _ref3$origin === void 0 ? ORIGIN : _ref3$origin;\n      vec3.rotateZ(this, this, origin, radians);\n      return this.check();\n    }\n  }, {\n    key: \"operation\",\n    value: function operation(_operation) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      _operation.apply(void 0, [this, this].concat(args));\n\n      return this.check();\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }]);\n\n  return Vector3;\n}(Vector);\n\nexport { Vector3 as default };\n//# sourceMappingURL=vector3.js.map","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Vector from './lib/vector';\nimport { checkNumber } from './lib/common';\n\nvar Vector4 = function (_Vector) {\n  _inherits(Vector4, _Vector);\n\n  function Vector4() {\n    var _this;\n\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, Vector4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector4).call(this));\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      _this.copy(x);\n    } else {\n      _this.set(x, y, z, w);\n    }\n\n    return _this;\n  }\n\n  _createClass(Vector4, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(m) {\n      m.transformVector(this, this);\n      return this;\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 4;\n    }\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this[2];\n    },\n    set: function set(value) {\n      return this[2] = checkNumber(value);\n    }\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this[3];\n    },\n    set: function set(value) {\n      return this[3] = checkNumber(value);\n    }\n  }]);\n\n  return Vector4;\n}(Vector);\n\nexport { Vector4 as default };\n//# sourceMappingURL=vector4.js.map","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './lib/math-array';\nimport { checkNumber } from './lib/common';\nimport { validateVector } from './lib/validators';\nimport Vector2 from './vector2';\nimport Vector3 from './vector3';\nimport Vector4 from './vector4';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nexport function validateMatrix4(m) {\n  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);\n}\n\nvar Matrix4 = function (_MathArray) {\n  _inherits(Matrix4, _MathArray);\n\n  function Matrix4() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, Matrix4);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix4).call(this));\n\n    if (Array.isArray(args[0]) && arguments.length === 1) {\n      _this.copy(args[0]);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix4, [{\n    key: \"setRowMajor\",\n    value: function setRowMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m10 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      var m12 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m13 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m20 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var m21 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n      var m23 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n      var m30 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;\n      var m31 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;\n      var m32 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;\n      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"setColumnMajor\",\n    value: function setColumnMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m30 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m01 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n      var m21 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m31 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m02 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var m12 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n      var m32 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;\n      var m03 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;\n      var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;\n      var m23 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;\n      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m30;\n      this[4] = m01;\n      this[5] = m11;\n      this[6] = m21;\n      this[7] = m31;\n      this[8] = m02;\n      this[9] = m12;\n      this[10] = m22;\n      this[11] = m32;\n      this[12] = m03;\n      this[13] = m13;\n      this[14] = m23;\n      this[15] = m33;\n      return this.check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      return this.setColumnMajor.apply(this, _toConsumableArray(array));\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      return this.setColumnMajor.apply(this, arguments);\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(i, j) {\n      var columnMajor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return columnMajor ? this[i][j] : this[j][i];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(i, j, value) {\n      var columnMajor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (columnMajor) {\n        this[i][j] = checkNumber(value);\n      } else {\n        this[j][i] = checkNumber(value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat4.determinant(this);\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      return this.copy(IDENTITY);\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat4.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"frustum\",\n    value: function frustum(_ref) {\n      var left = _ref.left,\n          right = _ref.right,\n          bottom = _ref.bottom,\n          top = _ref.top,\n          near = _ref.near,\n          far = _ref.far;\n      mat4.frustum(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(_ref2) {\n      var eye = _ref2.eye,\n          _ref2$center = _ref2.center,\n          center = _ref2$center === void 0 ? [0, 0, 0] : _ref2$center,\n          _ref2$up = _ref2.up,\n          up = _ref2$up === void 0 ? [0, 1, 0] : _ref2$up;\n      mat4.lookAt(this, eye, center, up);\n      return this.check();\n    }\n  }, {\n    key: \"ortho\",\n    value: function ortho(_ref3) {\n      var left = _ref3.left,\n          right = _ref3.right,\n          bottom = _ref3.bottom,\n          top = _ref3.top,\n          _ref3$near = _ref3.near,\n          near = _ref3$near === void 0 ? 0.1 : _ref3$near,\n          _ref3$far = _ref3.far,\n          far = _ref3$far === void 0 ? 500 : _ref3$far;\n      mat4.ortho(this, left, right, bottom, top, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"orthographic\",\n    value: function orthographic(_ref4) {\n      var _ref4$fovy = _ref4.fovy,\n          fovy = _ref4$fovy === void 0 ? 45 * Math.PI / 180 : _ref4$fovy,\n          _ref4$aspect = _ref4.aspect,\n          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,\n          _ref4$focalDistance = _ref4.focalDistance,\n          focalDistance = _ref4$focalDistance === void 0 ? 1 : _ref4$focalDistance,\n          _ref4$near = _ref4.near,\n          near = _ref4$near === void 0 ? 0.1 : _ref4$near,\n          _ref4$far = _ref4.far,\n          far = _ref4$far === void 0 ? 500 : _ref4$far;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      var halfY = fovy / 2;\n      var top = focalDistance * Math.tan(halfY);\n      var right = top * aspect;\n      return new Matrix4().ortho({\n        left: -right,\n        right: right,\n        bottom: -top,\n        top: top,\n        near: near,\n        far: far\n      });\n    }\n  }, {\n    key: \"perspective\",\n    value: function perspective() {\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          fovy = _ref5.fovy,\n          _ref5$fov = _ref5.fov,\n          fov = _ref5$fov === void 0 ? 45 * Math.PI / 180 : _ref5$fov,\n          _ref5$aspect = _ref5.aspect,\n          aspect = _ref5$aspect === void 0 ? 1 : _ref5$aspect,\n          _ref5$near = _ref5.near,\n          near = _ref5$near === void 0 ? 0.1 : _ref5$near,\n          _ref5$far = _ref5.far,\n          far = _ref5$far === void 0 ? 500 : _ref5$far;\n\n      fovy = fovy || fov;\n\n      if (fovy > Math.PI * 2) {\n        throw Error('radians');\n      }\n\n      mat4.perspective(this, fovy, aspect, near, far);\n      return this.check();\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat4.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat4.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat4.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat4.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(radians) {\n      mat4.rotateX(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(radians) {\n      mat4.rotateY(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(radians) {\n      mat4.rotateZ(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"rotateXYZ\",\n    value: function rotateXYZ(_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 3),\n          rx = _ref7[0],\n          ry = _ref7[1],\n          rz = _ref7[2];\n\n      return this.rotateX(rx).rotateY(ry).rotateZ(rz);\n    }\n  }, {\n    key: \"rotateAxis\",\n    value: function rotateAxis(radians, axis) {\n      mat4.rotate(this, this, radians, axis);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat4.scale(this, this, factor);\n      } else {\n        mat4.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat4.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transformVector2\",\n    value: function transformVector2(vector, out) {\n      out = out || new Vector2();\n      vec2.transformMat4(out, vector, this);\n      validateVector(out, 2);\n      return out;\n    }\n  }, {\n    key: \"transformVector3\",\n    value: function transformVector3(vector, out) {\n      out = out || new Vector3();\n      vec3.transformMat4(out, vector, this);\n      validateVector(out, 3);\n      return out;\n    }\n  }, {\n    key: \"transformVector4\",\n    value: function transformVector4(vector, out) {\n      out = out || new Vector4();\n      vec4.transformMat4(out, vector, this);\n      validateVector(out, 4);\n      return out.check();\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, out) {\n      switch (vector.length) {\n        case 2:\n          return this.transformVector2(vector, out);\n\n        case 3:\n          return this.transformVector3(vector, out);\n\n        case 4:\n          return this.transformVector4(vector, out);\n\n        default:\n          throw new Error('Illegal vector');\n      }\n    }\n  }, {\n    key: \"transformDirection\",\n    value: function transformDirection(vector, out) {\n      return this._transformVector(vector, out, 0);\n    }\n  }, {\n    key: \"transformPoint\",\n    value: function transformPoint(vector, out) {\n      return this._transformVector(vector, out, 1);\n    }\n  }, {\n    key: \"_transformVector\",\n    value: function _transformVector(vector, out, w) {\n      switch (vector.length) {\n        case 2:\n          out = out || new Vector2();\n          vec4.transformMat4(out, [vector[0], vector[1], 0, w], this);\n          out.length = 2;\n          validateVector(out, 2);\n          break;\n\n        case 3:\n          out = out || new Vector3();\n          vec4.transformMat4(out, [vector[0], vector[1], vector[2], w], this);\n          out.length = 3;\n          validateVector(out, 3);\n          break;\n\n        case 4:\n          if (Boolean(w) !== Boolean(vector[3])) {\n            throw new Error('math.gl: Matrix4.transformPoint - invalid vector');\n          }\n\n          out = out || new Vector4();\n          vec4.transformMat4(out, vector, this);\n          validateVector(out, 4);\n          break;\n\n        default:\n          throw new Error('Illegal vector');\n      }\n\n      return out;\n    }\n  }, {\n    key: \"makeRotationX\",\n    value: function makeRotationX(radians) {\n      return this.identity().rotateX(radians);\n    }\n  }, {\n    key: \"makeTranslation\",\n    value: function makeTranslation(x, y, z) {\n      return this.identity().translate([x, y, z]);\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 16;\n    }\n  }]);\n\n  return Matrix4;\n}(MathArray);\n\nexport { Matrix4 as default };\n//# sourceMappingURL=matrix4.js.map","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { withParameters } from '@luma.gl/core';\n\nvar Display = function () {\n  function Display() {\n    _classCallCheck(this, Display);\n  }\n\n  _createClass(Display, [{\n    key: \"getViews\",\n    value: function getViews(options) {\n      var width = options.width,\n          height = options.height;\n      return [{\n        params: {\n          viewport: [0, 0, width, height],\n          scissor: [0, 0, width, height],\n          scissorTest: true\n        }\n      }];\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      return true;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      return false;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"_renderFrame\",\n    value: function _renderFrame(options) {\n      var _this = this;\n\n      var views = this.getViews(options);\n\n      if (!views) {\n        return false;\n      }\n\n      var gl = this.animationLoop.gl;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var view = _step.value;\n          withParameters(gl, view.params, function () {\n            return _this.animationLoop.onRender(_objectSpread({}, options, view));\n          });\n        };\n\n        for (var _iterator = views[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.submitFrame();\n      return true;\n    }\n  }]);\n\n  return Display;\n}();\n\nexport { Display as default };\n//# sourceMappingURL=display.js.map","export function createEnterVRButton(_ref) {\n  var canvas = _ref.canvas,\n      title = _ref.title;\n\n  var _canvas$getBoundingCl = canvas.getBoundingClientRect(),\n      top = _canvas$getBoundingCl.top,\n      left = _canvas$getBoundingCl.left,\n      width = _canvas$getBoundingCl.width,\n      height = _canvas$getBoundingCl.height;\n\n  var container = document.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = \"\".concat(top, \"px\");\n  container.style.left = \"\".concat(left, \"px\");\n  container.style.width = \"\".concat(width, \"px\");\n  container.style.height = \"\".concat(height, \"px\");\n  container.style.pointerEvents = 'none';\n  container.style.zIndex = '999';\n  document.body.appendChild(container);\n  var button = document.createElement('button');\n  button.style.padding = '16px';\n  button.style.border = '1px solid #fff';\n  button.style.borderRadius = '8px';\n  button.style.background = 'rgba(0,0,0,0.5)';\n  button.style.color = '#fff';\n  button.style.font = 'normal 20px sans-serif';\n  button.style.cursor = 'pointer';\n  button.style.margin = '20px auto';\n  button.style.display = 'block';\n  button.style.pointerEvents = 'all';\n  button.textContent = title;\n  container.appendChild(button);\n  return button;\n}\n//# sourceMappingURL=vr-button.js.map","import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { log } from '@luma.gl/core';\nimport Display from './display';\nimport { createEnterVRButton } from './vr-button';\n\nvar VRDisplay = function (_Display) {\n  _inherits(VRDisplay, _Display);\n\n  _createClass(VRDisplay, null, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return 'getVRDisplays' in navigator && 'VRFrameData' in window;\n    }\n  }]);\n\n  function VRDisplay(props) {\n    var _this;\n\n    _classCallCheck(this, VRDisplay);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VRDisplay).call(this, props));\n    _this._vrSupported = VRDisplay.isSupported();\n\n    if (_this._vrSupported) {\n      _this.vrFrameData = new window.VRFrameData();\n      _this.vrPresenting = false;\n      _this.vrFrame = false;\n      window.addEventListener('vrdisplaypresentchange', _this._vrDisplayPresentChange.bind(_assertThisInitialized(_this)));\n    }\n\n    return _this;\n  }\n\n  _createClass(VRDisplay, [{\n    key: \"delete\",\n    value: function _delete() {\n      _get(_getPrototypeOf(VRDisplay.prototype), \"delete\", this).call(this);\n\n      this._removeVRButton();\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews(options) {\n      if (this._vrSupported) {\n        this._addVRButton();\n      }\n\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.getFrameData(this.vrFrameData);\n        var _this$vrFrameData = this.vrFrameData,\n            leftProjectionMatrix = _this$vrFrameData.leftProjectionMatrix,\n            leftViewMatrix = _this$vrFrameData.leftViewMatrix,\n            rightProjectionMatrix = _this$vrFrameData.rightProjectionMatrix,\n            rightViewMatrix = _this$vrFrameData.rightViewMatrix;\n        var width = options.width,\n            height = options.height;\n        return [{\n          displayEye: 'left',\n          projectionMatrix: leftProjectionMatrix,\n          viewMatrix: leftViewMatrix,\n          params: {\n            viewport: [0, 0, width * 0.5, height],\n            scissor: [0, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }, {\n          displayEye: 'right',\n          projectionMatrix: rightProjectionMatrix,\n          viewMatrix: rightViewMatrix,\n          params: {\n            viewport: [width * 0.5, 0, width * 0.5, height],\n            scissor: [width * 0.5, 0, width * 0.5, height],\n            scissorTest: true\n          }\n        }];\n      }\n\n      return _get(_getPrototypeOf(VRDisplay.prototype), \"getViews\", this).call(this, options);\n    }\n  }, {\n    key: \"submitFrame\",\n    value: function submitFrame() {\n      if (this.vrPresenting && this.vrFrame) {\n        this.vrDisplay.submitFrame();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"requestAnimationFrame\",\n    value: function requestAnimationFrame(renderFrame) {\n      var _this2 = this;\n\n      if (this.vrPresenting) {\n        this.vrDisplay.requestAnimationFrame(function () {\n          _this2.vrFrame = true;\n          renderFrame();\n          _this2.vrFrame = false;\n        });\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_addVRButton\",\n    value: function () {\n      var _addVRButton2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var canvas, displays;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.vrButton) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                canvas = this._getCanvas();\n\n                if (canvas) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 7;\n                return navigator.getVRDisplays();\n\n              case 7:\n                displays = _context.sent;\n\n                if (displays && displays.length) {\n                  log.info(2, 'Found VR Displays', displays)();\n                  this.vrDisplay = displays[0];\n                  this.vrButton = createEnterVRButton({\n                    canvas: canvas,\n                    title: \"Enter VR (\".concat(this.vrDisplay.displayName, \")\")\n                  });\n\n                  this.vrButton.onclick = function () {\n                    return _this3._startDisplay();\n                  };\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _addVRButton() {\n        return _addVRButton2.apply(this, arguments);\n      }\n\n      return _addVRButton;\n    }()\n  }, {\n    key: \"_getCanvas\",\n    value: function _getCanvas() {\n      return this.animationLoop.canvas || this.animationLoop.gl && this.animationLoop.gl.canvas;\n    }\n  }, {\n    key: \"_removeVRButton\",\n    value: function _removeVRButton() {\n      if (this.vrButton) {}\n    }\n  }, {\n    key: \"_startDisplay\",\n    value: function _startDisplay() {\n      this.vrDisplay.requestPresent([{\n        source: this._getCanvas()\n      }]);\n    }\n  }, {\n    key: \"_vrDisplayPresentChange\",\n    value: function _vrDisplayPresentChange() {\n      if (this.vrDisplay.isPresenting) {\n        log.info(2, 'Entering VR')();\n        this.vrPresenting = true;\n        this.vrButton.style.display = 'none';\n      } else {\n        log.info(2, 'Exiting VR')();\n        this.vrPresenting = false;\n        this.vrButton.style.display = 'block';\n      }\n    }\n  }]);\n\n  return VRDisplay;\n}(Display);\n\nexport { VRDisplay as default };\n//# sourceMappingURL=vr-display.js.map"],"sourceRoot":""}