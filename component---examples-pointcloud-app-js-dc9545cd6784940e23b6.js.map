{"version":3,"sources":["webpack:///../modules/ply/src/parser/normalize-ply.js","webpack:///../modules/ply/src/parser/parse-ply.js","webpack:///../modules/ply/src/ply-loader.js","webpack:///../examples/pointcloud/app.js"],"names":["normalizeAttributes","attributes","accessors","value","Float32Array","vertices","size","normals","uvs","Uint8Array","colors","parsePLY","data","options","header","ArrayBuffer","text","text_encoding","decode","parseHeader","parseASCII","result","indices","littleEndian","body","DataView","headerLength","loc","currentElement","length","count","currentElementCount","binaryReadElement","properties","element","handleElement","name","parseBinary","loaderData","vertexCount","mode","Uint32Array","normalizePLY","headerText","PLY_HEADER_PATTERN","lineType","lineValues","comments","elements","lines","i","line","undefined","parseInt","makePLYElementProperty","console","propertValues","propertyNameMapping","property","type","parseASCIINumber","n","parseFloat","Error","parseASCIIElement","values","list","shift","countType","j","patternBody","buffer","elementName","vertexIndices","vertex_index","binaryRead","dataview","at","read","itemType","ply_loader","extensions","parseTextSync","parseSync","binary","DEFAULT_OPTIONS","registerLoaders","PLY_SAMPLE","INITIAL_VIEW_STATE","target","rotationX","rotationOrbit","orbitAxis","fov","minZoom","maxZoom","zoom","transitionInterpolator","esm","App","props","_this","_PureComponent","call","this","state","viewState","pointsCount","points","_onLoad","bind","assertThisInitialized_default","_onViewStateChange","_rotateCamera","load","_ref","setState","Object","assign","transitionDuration","onTransitionEnd","_ref2","_loaderData$header","progress","mins","maxs","Math","window","onLoad","_renderLayers","_this$state","point_cloud_layer","id","coordinateSystem","COORDINATE_SYSTEM","IDENTITY","numInstances","instancePositions","getNormal","getColor","opacity","pointSize","render","react_default","a","createElement","deckgl","views","controller","onViewStateChange","layers","parameters","clearColor","PureComponent","renderToDOM","container","app_App"],"mappings":"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","file":"component---examples-pointcloud-app-js-dc9545cd6784940e23b6.js","sourcesContent":["export default function normalizePLY(header, attributes, options) {\n  const result = {\n    loaderData: {\n      header\n    },\n    // TODO - how to detect POINT CLOUDS vs MESHES?\n    // TODO - For Meshes, PLY quadrangles must be split?\n    header: {\n      vertexCount: attributes.indices.length || attributes.vertices.length / 3\n    },\n    mode: attributes.indices && attributes.indices.length > 0 ? 4 : 0, // TRIANGLES vs POINTS\n    attributes: normalizeAttributes(attributes, options)\n  };\n\n  if (attributes.indices && attributes.indices.length > 0) {\n    result.indices = {value: new Uint32Array(attributes.indices), size: 1};\n  }\n\n  return result;\n}\n\nfunction normalizeAttributes(attributes) {\n  const accessors = {};\n\n  accessors.POSITION = {value: new Float32Array(attributes.vertices), size: 3};\n\n  // optional attributes data\n\n  if (attributes.normals.length > 0) {\n    accessors.NORMAL = {value: new Float32Array(attributes.normals), size: 3};\n  }\n\n  if (attributes.uvs.length > 0) {\n    accessors.TEXCOORD_0 = {value: new Float32Array(attributes.uvs), size: 2};\n  }\n\n  if (attributes.colors.length > 0) {\n    accessors.COLOR_0 = {value: new Uint8Array(attributes.colors), size: 3};\n  }\n\n  return accessors;\n}\n","// PLY Loader, adapted from THREE.js (MIT license)\n//\n// Attributions per original THREE.js source file:\n//\n// @author Wei Meng / http://about.me/menway\n//\n// Description: A loader for PLY ASCII files (known as the Polygon File Format\n// or the Stanford Triangle Format).\n//\n// Limitations: ASCII decoding assumes file is UTF-8.\n//\n// If the PLY file uses non standard property names, they can be mapped while\n// loading. For example, the following maps the properties\n// “diffuse_(red|green|blue)” in the file to standard color names.\n//\n// parsePLY(data, {\n//   propertyNameMapping: {\n//     diffuse_red: 'red',\n//     diffuse_green: 'green',\n//     diffuse_blue: 'blue'\n//   }\n// });\n\nimport {TextDecoder} from '@loaders.gl/core';\nimport normalizePLY from './normalize-ply';\n\nexport default function parsePLY(data, options = {}) {\n  let header;\n  let attributes;\n\n  if (data instanceof ArrayBuffer) {\n    const text = new TextDecoder().decode(data);\n    header = parseHeader(text, options);\n    attributes = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n  } else {\n    header = parseHeader(data, options);\n    attributes = parseASCII(data, header);\n  }\n\n  return normalizePLY(header, attributes, options);\n}\n\nfunction parseHeader(data, options) {\n  const PLY_HEADER_PATTERN = /ply([\\s\\S]*)end_header\\s/;\n\n  let headerText = '';\n  let headerLength = 0;\n\n  const result = PLY_HEADER_PATTERN.exec(data);\n\n  if (result !== null) {\n    headerText = result[1];\n    headerLength = result[0].length;\n  }\n\n  const header = {\n    comments: [],\n    elements: [],\n    headerLength\n  };\n\n  const lines = headerText.split('\\n');\n  let currentElement;\n  let lineType;\n  let lineValues;\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    line = line.trim();\n\n    if (line === '') {\n      // eslint-disable-next-line\n      continue;\n    }\n\n    lineValues = line.split(/\\s+/);\n    lineType = lineValues.shift();\n    line = lineValues.join(' ');\n\n    switch (lineType) {\n      case 'format':\n        header.format = lineValues[0];\n        header.version = lineValues[1];\n        break;\n\n      case 'comment':\n        header.comments.push(line);\n        break;\n\n      case 'element':\n        if (currentElement !== undefined) {\n          header.elements.push(currentElement);\n        }\n\n        currentElement = {};\n        currentElement.name = lineValues[0];\n        currentElement.count = parseInt(lineValues[1], 10);\n        currentElement.properties = [];\n        break;\n\n      case 'property':\n        currentElement.properties.push(\n          makePLYElementProperty(lineValues, options.propertyNameMapping)\n        );\n        break;\n\n      default:\n        // eslint-disable-next-line\n        console.log('unhandled', lineType, lineValues);\n    }\n  }\n\n  if (currentElement !== undefined) {\n    header.elements.push(currentElement);\n  }\n\n  return header;\n}\n\nfunction makePLYElementProperty(propertValues, propertyNameMapping) {\n  const property = {\n    type: propertValues[0]\n  };\n\n  if (property.type === 'list') {\n    property.name = propertValues[3];\n    property.countType = propertValues[1];\n    property.itemType = propertValues[2];\n  } else {\n    property.name = propertValues[1];\n  }\n\n  if (propertyNameMapping && property.name in propertyNameMapping) {\n    property.name = propertyNameMapping[property.name];\n  }\n\n  return property;\n}\n\n// eslint-disable-next-line complexity\nfunction parseASCIINumber(n, type) {\n  switch (type) {\n    case 'char':\n    case 'uchar':\n    case 'short':\n    case 'ushort':\n    case 'int':\n    case 'uint':\n    case 'int8':\n    case 'uint8':\n    case 'int16':\n    case 'uint16':\n    case 'int32':\n    case 'uint32':\n      return parseInt(n, 10);\n\n    case 'float':\n    case 'double':\n    case 'float32':\n    case 'float64':\n      return parseFloat(n);\n\n    default:\n      throw new Error(type);\n  }\n}\n\nfunction parseASCIIElement(properties, line) {\n  const values = line.split(/\\s+/);\n\n  const element = {};\n\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      const list = [];\n      const n = parseASCIINumber(values.shift(), properties[i].countType);\n\n      for (let j = 0; j < n; j++) {\n        list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n      }\n\n      element[properties[i].name] = list;\n    } else {\n      element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n    }\n  }\n\n  return element;\n}\n\nfunction parseASCII(data, header) {\n  // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n  const attributes = {\n    indices: [],\n    vertices: [],\n    normals: [],\n    uvs: [],\n    colors: []\n  };\n\n  let result;\n\n  const patternBody = /end_header\\s([\\s\\S]*)$/;\n  let body = '';\n  if ((result = patternBody.exec(data)) !== null) {\n    body = result[1];\n  }\n\n  const lines = body.split('\\n');\n  let currentElement = 0;\n  let currentElementCount = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    line = line.trim();\n\n    if (line !== '') {\n      if (currentElementCount >= header.elements[currentElement].count) {\n        currentElement++;\n        currentElementCount = 0;\n      }\n\n      const element = parseASCIIElement(header.elements[currentElement].properties, line);\n      handleElement(attributes, header.elements[currentElement].name, element);\n      currentElementCount++;\n    }\n  }\n\n  return attributes;\n}\n\n// eslint-disable-next-line complexity\nfunction handleElement(buffer, elementName, element) {\n  if (elementName === 'vertex') {\n    buffer.vertices.push(element.x, element.y, element.z);\n\n    if ('nx' in element && 'ny' in element && 'nz' in element) {\n      buffer.normals.push(element.nx, element.ny, element.nz);\n    }\n\n    if ('s' in element && 't' in element) {\n      buffer.uvs.push(element.s, element.t);\n    }\n\n    if ('red' in element && 'green' in element && 'blue' in element) {\n      buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n    }\n  } else if (elementName === 'face') {\n    const vertexIndices = element.vertex_indices || element.vertex_index; // issue #9338\n\n    if (vertexIndices.length === 3) {\n      buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[2]);\n    } else if (vertexIndices.length === 4) {\n      buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[3]);\n      buffer.indices.push(vertexIndices[1], vertexIndices[2], vertexIndices[3]);\n    }\n  }\n}\n\n// eslint-disable-next-line complexity\nfunction binaryRead(dataview, at, type, littleEndian) {\n  switch (type) {\n    // corespondences for non-specific length types here match rply:\n    case 'int8':\n    case 'char':\n      return [dataview.getInt8(at), 1];\n    case 'uint8':\n    case 'uchar':\n      return [dataview.getUint8(at), 1];\n    case 'int16':\n    case 'short':\n      return [dataview.getInt16(at, littleEndian), 2];\n    case 'uint16':\n    case 'ushort':\n      return [dataview.getUint16(at, littleEndian), 2];\n    case 'int32':\n    case 'int':\n      return [dataview.getInt32(at, littleEndian), 4];\n    case 'uint32':\n    case 'uint':\n      return [dataview.getUint32(at, littleEndian), 4];\n    case 'float32':\n    case 'float':\n      return [dataview.getFloat32(at, littleEndian), 4];\n    case 'float64':\n    case 'double':\n      return [dataview.getFloat64(at, littleEndian), 8];\n\n    default:\n      throw new Error(type);\n  }\n}\n\nfunction binaryReadElement(dataview, at, properties, littleEndian) {\n  const element = {};\n  let result;\n  let read = 0;\n\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      const list = [];\n\n      result = binaryRead(dataview, at + read, properties[i].countType, littleEndian);\n      const n = result[0];\n      read += result[1];\n\n      for (let j = 0; j < n; j++) {\n        result = binaryRead(dataview, at + read, properties[i].itemType, littleEndian);\n        list.push(result[0]);\n        read += result[1];\n      }\n\n      element[properties[i].name] = list;\n    } else {\n      result = binaryRead(dataview, at + read, properties[i].type, littleEndian);\n      element[properties[i].name] = result[0];\n      read += result[1];\n    }\n  }\n\n  return [element, read];\n}\n\nfunction parseBinary(data, header) {\n  const attributes = {\n    indices: [],\n    vertices: [],\n    normals: [],\n    uvs: [],\n    colors: []\n  };\n\n  const littleEndian = header.format === 'binary_little_endian';\n  const body = new DataView(data, header.headerLength);\n  let result;\n  let loc = 0;\n\n  for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n    const count = header.elements[currentElement].count;\n    for (let currentElementCount = 0; currentElementCount < count; currentElementCount++) {\n      result = binaryReadElement(\n        body,\n        loc,\n        header.elements[currentElement].properties,\n        littleEndian\n      );\n      loc += result[1];\n      const element = result[0];\n\n      handleElement(attributes, header.elements[currentElement].name, element);\n    }\n  }\n\n  return attributes;\n}\n","// description: 'PLY - Polygon File Format (aka Stanford Triangle Format)'\n// links: ['http://paulbourke.net/dataformats/ply/',\n// 'https://en.wikipedia.org/wiki/PLY_(file_format)']\n\nimport parsePLY from './parser/parse-ply';\n\nconst DEFAULT_OPTIONS = {};\n\nexport default {\n  name: 'PLY',\n  extensions: ['ply'],\n  // Note: parsePLY supports both text and binary\n  parseTextSync: parsePLY,\n  parseSync: parsePLY,\n  text: true,\n  binary: true,\n  DEFAULT_OPTIONS\n};\n","/* eslint-disable no-unused-vars */\nimport React, {PureComponent} from 'react';\nimport {render} from 'react-dom';\nimport DeckGL from '@deck.gl/react';\nimport {COORDINATE_SYSTEM, OrbitView, LinearInterpolator} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\n\n// import {LASLoader} from '@loaders.gl/las';\n// TODO fix LasWorkerLoader\n// import {LASWorkerLoader} from '@loaders.gl/las';\nimport {PLYLoader} from '@loaders.gl/ply';\nimport {load, registerLoaders} from '@loaders.gl/core';\n\n// Additional format support can be added here, see\nregisterLoaders(PLYLoader);\n\n// Data source: kaarta.com\n// const LAZ_SAMPLE =\n//   'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/point-cloud-laz/indoor.0.1.laz';\n// Data source: The Stanford 3D Scanning Repository\nconst PLY_SAMPLE =\n  'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/point-cloud-ply/lucy800k.ply';\n\nconst INITIAL_VIEW_STATE = {\n  target: [0, 0, 0],\n  rotationX: 0,\n  rotationOrbit: 0,\n  orbitAxis: 'Y',\n  fov: 50,\n  minZoom: 0,\n  maxZoom: 10,\n  zoom: 1\n};\n\nconst transitionInterpolator = new LinearInterpolator(['rotationOrbit']);\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      viewState: INITIAL_VIEW_STATE,\n      pointsCount: 0,\n      points: null\n    };\n\n    this._onLoad = this._onLoad.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._rotateCamera = this._rotateCamera.bind(this);\n\n    load(PLY_SAMPLE).then(this._onLoad);\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({viewState});\n  }\n\n  _rotateCamera() {\n    const {viewState} = this.state;\n    this.setState({\n      viewState: {\n        ...viewState,\n        rotationOrbit: viewState.rotationOrbit + 30,\n        transitionDuration: 600,\n        transitionInterpolator,\n        onTransitionEnd: this._rotateCamera\n      }\n    });\n  }\n\n  _onLoad({header, loaderData, attributes, progress}) {\n    // metadata from LAZ file header\n    const {mins, maxs} = loaderData.header;\n    let {viewState} = this.state;\n\n    if (mins && maxs) {\n      // File contains bounding box info\n      viewState = {\n        ...viewState,\n        target: [(mins[0] + maxs[0]) / 2, (mins[1] + maxs[1]) / 2, (mins[2] + maxs[2]) / 2],\n        /* global window */\n        zoom: Math.log2(window.innerWidth / (maxs[0] - mins[0])) - 1\n      };\n    }\n\n    if (this.props.onLoad) {\n      this.props.onLoad({count: header.vertexCount, progress: 1});\n    }\n\n    this.setState(\n      {\n        pointsCount: header.vertexCount,\n        points: attributes.POSITION.value,\n        viewState\n      },\n      this._rotateCamera\n    );\n  }\n\n  _renderLayers() {\n    const {pointsCount, points} = this.state;\n\n    return [\n      points &&\n        new PointCloudLayer({\n          id: 'laz-point-cloud-layer',\n          coordinateSystem: COORDINATE_SYSTEM.IDENTITY,\n          numInstances: pointsCount,\n          instancePositions: points,\n          getNormal: [0, 1, 0],\n          getColor: [255, 255, 255],\n          opacity: 0.5,\n          pointSize: 0.5\n        })\n    ];\n  }\n\n  render() {\n    const {viewState} = this.state;\n\n    return (\n      <DeckGL\n        views={new OrbitView()}\n        viewState={viewState}\n        controller={true}\n        onViewStateChange={this._onViewStateChange}\n        layers={this._renderLayers()}\n        parameters={{\n          clearColor: [0.07, 0.14, 0.19, 1]\n        }}\n      />\n    );\n  }\n}\n\nexport function renderToDOM(container) {\n  render(<App />, container);\n}\n"],"sourceRoot":""}