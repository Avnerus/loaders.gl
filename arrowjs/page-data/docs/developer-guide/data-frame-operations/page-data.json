{"componentChunkName":"component---node-modules-ocular-gatsby-src-templates-doc-page-markdown-jsx","path":"/docs/developer-guide/data-frame-operations","webpackCompilationHash":"6ee657213d031b34b69d","result":{"data":{"docBySlug":{"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{"id":"data-frame-operations"},"children":[{"type":"element","tagName":"a","properties":{"href":"#data-frame-operations","ariaLabel":"data frame operations permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Data Frame Operations"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Part of the power of data frame operations is that they typically do not actually perform any modifications (copying etc) of the underlying data, and ultimately only impact how iteration over that data is done, and what \"view\" of the data is presented. This allows data frame operations to be extremely performant, even when applied on very big (multi-gigabyte) data aset."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the Arrow JS "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Table"}]},{"type":"text","value":" class inherits from the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame"}]},{"type":"text","value":" class which is why the examples in this section can use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame"}]},{"type":"text","value":" methods to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Table"}]},{"type":"text","value":" instances."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Also, most of the data frame operations do not modify the original "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Table"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame"}]},{"type":"text","value":", but rather return a new similar object with new filtering or \"iteration constraints\" applied. So memory is usually not changed or modified during these operations."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"References:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Much of the text in this section is adapted from Brian Hulette's "},{"type":"element","tagName":"a","properties":{"href":"https://observablehq.com/@theneuralbit/introduction-to-apache-arrow"},"children":[{"type":"text","value":"Introduction to Apache Arrow"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"removing-rows"},"children":[{"type":"element","tagName":"a","properties":{"href":"#removing-rows","ariaLabel":"removing rows permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Removing Rows"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A simplest way to remove rows from a data frame mey be use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Table.slice(start, end)"}]},{"type":"text","value":". As usual, rather than actually modifying memory, this operation returns a new "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Table"}]},{"type":"text","value":"/"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame"}]},{"type":"text","value":" with iteration constrained to a sub set of the rows in the original frame."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"removing-columns"},"children":[{"type":"element","tagName":"a","properties":{"href":"#removing-columns","ariaLabel":"removing columns permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Removing Columns"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Table.select(keys: String[])"}]},{"type":"text","value":" method drops all columns except the columns with names that match the supplied "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"keys"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"table"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"select"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'name'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'age'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// Drop all colums except name and age"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"filtering-rows"},"children":[{"type":"element","tagName":"a","properties":{"href":"#filtering-rows","ariaLabel":"filtering rows permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Filtering Rows"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another way to \"remove\" rows from data frames is to apply filters. Filters effectively \"removes\" rows that don't fullfill the predicates in the filter. For details see the note below."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" selectedName "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'myname'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// Remove all rows with name === 'myname'"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" dataFrame "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" table"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"filter"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"arrow"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"predicate"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"col"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'name'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"eq"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"selectedName"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The predicates classes provided by arrow allows for the comparison of column values against literals or javascript values (equality, greater or equal than, less or equal than) as well as the creation of composite logical expressions ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"and"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"or"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"not"}]},{"type":"text","value":") out of individual column comparisons."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is also possible to write custom predicates by supplying an arbitrary JavaScript function to filter a row, however performance is usually best when using the built-in comparison predicates."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that calling "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"filter()"}]},{"type":"text","value":" on a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame"}]},{"type":"text","value":" doesn't actually remove any rows from the underlying data store (it just stores the predicates). It's not until you iterate over the date, e.g. by calling "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"countBy()"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"scan()"}]},{"type":"text","value":" that we actually apply the filter on the rows."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"counting-rows"},"children":[{"type":"element","tagName":"a","properties":{"href":"#counting-rows","ariaLabel":"counting rows permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Counting Rows"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To count the number of times different values appear in a table, use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"countBy()"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" newTable "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" table"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"countBy"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"'column_name'"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"countBy()"}]},{"type":"text","value":" does not return a modified data frame or table, but instead returns a new "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Table"}]},{"type":"text","value":" that contains two columns, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"value"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"count"}]},{"type":"text","value":". Each distinct value in the specified column in the original table is listed once in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"value"}]},{"type":"text","value":", and the corresponding "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"count"}]},{"type":"text","value":" field in the same row indicates how many times it was present in the original table."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the results are not sorted."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"sorting"},"children":[{"type":"element","tagName":"a","properties":{"href":"#sorting","ariaLabel":"sorting permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Sorting"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DataFrames do not currently support sorting. To sort you need to move the data back to JavaScript arrays."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"iterating-over-a-dataframe-scanning"},"children":[{"type":"element","tagName":"a","properties":{"href":"#iterating-over-a-dataframe-scanning","ariaLabel":"iterating over a dataframe scanning permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Iterating over a DataFrame (Scanning)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame.scan()"}]},{"type":"text","value":" method lets you define a custom function that will be called for each (non-filtered) record in the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: For simpler use cases, it is recommended to use the Arrow API provided predicates etc rather than writing a custom scan function, as performance will often be better."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"writing-a-code-classlanguage-textnextcode-callback-for-code-classlanguage-textscancode"},"children":[{"type":"element","tagName":"a","properties":{"href":"#writing-a-code-classlanguage-textnextcode-callback-for-code-classlanguage-textscancode","ariaLabel":"writing a code classlanguage textnextcode callback for code classlanguage textscancode permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Writing a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"next"}]},{"type":"text","value":" callback for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"scan()"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to be more efficient, Arrow data is broken up into batches of records (which is what makes it possible to do concatenations despite the columnar layout, and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"DataFrame.scan()"}]},{"type":"text","value":" does not hide this implementation detail from you."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{"id":"optimizing-code-classlanguage-textscancode-performance-with-code-classlanguage-textbindcode-callbacks"},"children":[{"type":"element","tagName":"a","properties":{"href":"#optimizing-code-classlanguage-textscancode-performance-with-code-classlanguage-textbindcode-callbacks","ariaLabel":"optimizing code classlanguage textscancode performance with code classlanguage textbindcode callbacks permalink","className":["anchor"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Optimizing "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"scan()"}]},{"type":"text","value":" performance with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bind()"}]},{"type":"text","value":" callbacks"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In addition to the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"next"}]},{"type":"text","value":" callback, you can supply a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"bind"}]},{"type":"text","value":" function for scan to call each time it starts reading from a new "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RecordBatch"}]},{"type":"text","value":". "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"scan"}]},{"type":"text","value":" will call these functions as illustrated in the following pseudo-code:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"js"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" batch "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"of"}]},{"type":"text","value":" batches"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"bind"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"batch"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"const"}]},{"type":"text","value":" index "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" batch"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"{"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"next"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"index"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" batch"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"}"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"index"}]},{"type":"text","value":" passed to next only applies to the current RecordBatch, it is not a global index."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The current "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"RecordBatch"}]},{"type":"text","value":" is passed to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"next"}]},{"type":"text","value":", so it is possible to access data without writing a bind function, but there will be a performance penalty if your data has a lot of batches."}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"timeToRead":4,"excerpt":"Data Frame Operations Part of the power of data frame operations is that they typically do not actually perform any modifications (copying…","frontmatter":{"title":"Data Frame Operations","cover":"cover","category":"docs","tags":["default"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"relativeLinks":{"../../paul-drafts/visitors/index.md":"/docs/paul-drafts/visitors/index","arrowjs/docs/paul-drafts/visitors/index.md":"/docs/paul-drafts/visitors/index","../../paul-drafts/visitors/index":"/docs/paul-drafts/visitors/index","docs/paul-drafts/visitors/index":"/docs/paul-drafts/visitors/index","../../paul-drafts/tables/index.md":"/docs/paul-drafts/tables/index","arrowjs/docs/paul-drafts/tables/index.md":"/docs/paul-drafts/tables/index","../../paul-drafts/tables/index":"/docs/paul-drafts/tables/index","docs/paul-drafts/tables/index":"/docs/paul-drafts/tables/index","../../paul-drafts/builders/index.md":"/docs/paul-drafts/builders/index","arrowjs/docs/paul-drafts/builders/index.md":"/docs/paul-drafts/builders/index","../../paul-drafts/builders/index":"/docs/paul-drafts/builders/index","docs/paul-drafts/builders/index":"/docs/paul-drafts/builders/index","../../paul-drafts/data-types/index.md":"/docs/paul-drafts/data-types/index","arrowjs/docs/paul-drafts/data-types/index.md":"/docs/paul-drafts/data-types/index","../../paul-drafts/data-types/index":"/docs/paul-drafts/data-types/index","docs/paul-drafts/data-types/index":"/docs/paul-drafts/data-types/index","../../paul-drafts/vectors/index.md":"/docs/paul-drafts/vectors/index","arrowjs/docs/paul-drafts/vectors/index.md":"/docs/paul-drafts/vectors/index","../../paul-drafts/vectors/index":"/docs/paul-drafts/vectors/index","docs/paul-drafts/vectors/index":"/docs/paul-drafts/vectors/index","../../paul-drafts/ipc/index.md":"/docs/paul-drafts/ipc/index","arrowjs/docs/paul-drafts/ipc/index.md":"/docs/paul-drafts/ipc/index","../../paul-drafts/ipc/index":"/docs/paul-drafts/ipc/index","docs/paul-drafts/ipc/index":"/docs/paul-drafts/ipc/index","../../README.md":"/docs","arrowjs/docs/README.md":"/docs","../..":"/docs","docs":"/docs","../../roadmap.md":"/docs/roadmap","arrowjs/docs/roadmap.md":"/docs/roadmap","../../roadmap":"/docs/roadmap","docs/roadmap":"/docs/roadmap","../../contributing.md":"/docs/contributing","arrowjs/docs/contributing.md":"/docs/contributing","../../contributing":"/docs/contributing","docs/contributing":"/docs/contributing","../../whats-new.md":"/docs/whats-new","arrowjs/docs/whats-new.md":"/docs/whats-new","../../whats-new":"/docs/whats-new","docs/whats-new":"/docs/whats-new","../../paul-drafts/introduction.md":"/docs/paul-drafts/introduction","arrowjs/docs/paul-drafts/introduction.md":"/docs/paul-drafts/introduction","../../paul-drafts/introduction":"/docs/paul-drafts/introduction","docs/paul-drafts/introduction":"/docs/paul-drafts/introduction","../../get-started/examples.md":"/docs/get-started/examples","arrowjs/docs/get-started/examples.md":"/docs/get-started/examples","../../get-started/examples":"/docs/get-started/examples","docs/get-started/examples":"/docs/get-started/examples","../../get-started/installing.md":"/docs/get-started/installing","arrowjs/docs/get-started/installing.md":"/docs/get-started/installing","../../get-started/installing":"/docs/get-started/installing","docs/get-started/installing":"/docs/get-started/installing","../big-ints.md":"/docs/developer-guide/big-ints","arrowjs/docs/developer-guide/big-ints.md":"/docs/developer-guide/big-ints","../big-ints":"/docs/developer-guide/big-ints","docs/developer-guide/big-ints":"/docs/developer-guide/big-ints","../converting-data.md":"/docs/developer-guide/converting-data","arrowjs/docs/developer-guide/converting-data.md":"/docs/developer-guide/converting-data","../converting-data":"/docs/developer-guide/converting-data","docs/developer-guide/converting-data":"/docs/developer-guide/converting-data","":"/docs/developer-guide/data-frame-operations","arrowjs/docs/developer-guide/data-frame-operations.md":"/docs/developer-guide/data-frame-operations","docs/developer-guide/data-frame-operations":"/docs/developer-guide/data-frame-operations","../data-sources.md":"/docs/developer-guide/data-sources","arrowjs/docs/developer-guide/data-sources.md":"/docs/developer-guide/data-sources","../data-sources":"/docs/developer-guide/data-sources","docs/developer-guide/data-sources":"/docs/developer-guide/data-sources","../data-types.md":"/docs/developer-guide/data-types","arrowjs/docs/developer-guide/data-types.md":"/docs/developer-guide/data-types","../data-types":"/docs/developer-guide/data-types","docs/developer-guide/data-types":"/docs/developer-guide/data-types","../memory-management.md":"/docs/developer-guide/memory-management","arrowjs/docs/developer-guide/memory-management.md":"/docs/developer-guide/memory-management","../memory-management":"/docs/developer-guide/memory-management","docs/developer-guide/memory-management":"/docs/developer-guide/memory-management","../predicates.md":"/docs/developer-guide/predicates","arrowjs/docs/developer-guide/predicates.md":"/docs/developer-guide/predicates","../predicates":"/docs/developer-guide/predicates","docs/developer-guide/predicates":"/docs/developer-guide/predicates","../tables.md":"/docs/developer-guide/tables","arrowjs/docs/developer-guide/tables.md":"/docs/developer-guide/tables","../tables":"/docs/developer-guide/tables","docs/developer-guide/tables":"/docs/developer-guide/tables","../reading-and-writing.md":"/docs/developer-guide/reading-and-writing","arrowjs/docs/developer-guide/reading-and-writing.md":"/docs/developer-guide/reading-and-writing","../reading-and-writing":"/docs/developer-guide/reading-and-writing","docs/developer-guide/reading-and-writing":"/docs/developer-guide/reading-and-writing","../typescript.md":"/docs/developer-guide/typescript","arrowjs/docs/developer-guide/typescript.md":"/docs/developer-guide/typescript","../typescript":"/docs/developer-guide/typescript","docs/developer-guide/typescript":"/docs/developer-guide/typescript","../../api-reference/README.md":"/docs/api-reference","arrowjs/docs/api-reference/README.md":"/docs/api-reference","../../api-reference":"/docs/api-reference","docs/api-reference":"/docs/api-reference","../../api-reference/chunked.md":"/docs/api-reference/chunked","arrowjs/docs/api-reference/chunked.md":"/docs/api-reference/chunked","../../api-reference/chunked":"/docs/api-reference/chunked","docs/api-reference/chunked":"/docs/api-reference/chunked","../../api-reference/column.md":"/docs/api-reference/column","arrowjs/docs/api-reference/column.md":"/docs/api-reference/column","../../api-reference/column":"/docs/api-reference/column","docs/api-reference/column":"/docs/api-reference/column","../../api-reference/data-frame.md":"/docs/api-reference/data-frame","arrowjs/docs/api-reference/data-frame.md":"/docs/api-reference/data-frame","../../api-reference/data-frame":"/docs/api-reference/data-frame","docs/api-reference/data-frame":"/docs/api-reference/data-frame","../../api-reference/data.md":"/docs/api-reference/data","arrowjs/docs/api-reference/data.md":"/docs/api-reference/data","../../api-reference/data":"/docs/api-reference/data","docs/api-reference/data":"/docs/api-reference/data","../../api-reference/dictionary.md":"/docs/api-reference/dictionary","arrowjs/docs/api-reference/dictionary.md":"/docs/api-reference/dictionary","../../api-reference/dictionary":"/docs/api-reference/dictionary","docs/api-reference/dictionary":"/docs/api-reference/dictionary","../../api-reference/field.md":"/docs/api-reference/field","arrowjs/docs/api-reference/field.md":"/docs/api-reference/field","../../api-reference/field":"/docs/api-reference/field","docs/api-reference/field":"/docs/api-reference/field","../../api-reference/predicates.md":"/docs/api-reference/predicates","arrowjs/docs/api-reference/predicates.md":"/docs/api-reference/predicates","../../api-reference/predicates":"/docs/api-reference/predicates","docs/api-reference/predicates":"/docs/api-reference/predicates","../../api-reference/record-batch-reader.md":"/docs/api-reference/record-batch-reader","arrowjs/docs/api-reference/record-batch-reader.md":"/docs/api-reference/record-batch-reader","../../api-reference/record-batch-reader":"/docs/api-reference/record-batch-reader","docs/api-reference/record-batch-reader":"/docs/api-reference/record-batch-reader","../../api-reference/record-batch-writer.md":"/docs/api-reference/record-batch-writer","arrowjs/docs/api-reference/record-batch-writer.md":"/docs/api-reference/record-batch-writer","../../api-reference/record-batch-writer":"/docs/api-reference/record-batch-writer","docs/api-reference/record-batch-writer":"/docs/api-reference/record-batch-writer","../../api-reference/record-batch.md":"/docs/api-reference/record-batch","arrowjs/docs/api-reference/record-batch.md":"/docs/api-reference/record-batch","../../api-reference/record-batch":"/docs/api-reference/record-batch","docs/api-reference/record-batch":"/docs/api-reference/record-batch","../../api-reference/row.md":"/docs/api-reference/row","arrowjs/docs/api-reference/row.md":"/docs/api-reference/row","../../api-reference/row":"/docs/api-reference/row","docs/api-reference/row":"/docs/api-reference/row","../../api-reference/schema.md":"/docs/api-reference/schema","arrowjs/docs/api-reference/schema.md":"/docs/api-reference/schema","../../api-reference/schema":"/docs/api-reference/schema","docs/api-reference/schema":"/docs/api-reference/schema","../../api-reference/struct-vector.md":"/docs/api-reference/struct-vector","arrowjs/docs/api-reference/struct-vector.md":"/docs/api-reference/struct-vector","../../api-reference/struct-vector":"/docs/api-reference/struct-vector","docs/api-reference/struct-vector":"/docs/api-reference/struct-vector","../../api-reference/table.md":"/docs/api-reference/table","arrowjs/docs/api-reference/table.md":"/docs/api-reference/table","../../api-reference/table":"/docs/api-reference/table","docs/api-reference/table":"/docs/api-reference/table","../../api-reference/types.md":"/docs/api-reference/types","arrowjs/docs/api-reference/types.md":"/docs/api-reference/types","../../api-reference/types":"/docs/api-reference/types","docs/api-reference/types":"/docs/api-reference/types","../../api-reference/vectors.md":"/docs/api-reference/vectors","arrowjs/docs/api-reference/vectors.md":"/docs/api-reference/vectors","../../api-reference/vectors":"/docs/api-reference/vectors","docs/api-reference/vectors":"/docs/api-reference/vectors","../../api-reference/vector.md":"/docs/api-reference/vector","arrowjs/docs/api-reference/vector.md":"/docs/api-reference/vector","../../api-reference/vector":"/docs/api-reference/vector","docs/api-reference/vector":"/docs/api-reference/vector"},"slug":"docs/developer-guide/data-frame-operations","toc":"docs"}}}