{"data":{"docBySlug":{"html":"<h1 id=\"notes-on-memory-management\"><a href=\"#notes-on-memory-management\" aria-label=\"notes on memory management permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Notes on Memory Management</h1>\n<ul>\n<li>Arrow reads in arrow data as arraybuffer(s) and then creates chunks that are \"sub array views\" into that big array buffer, and lists of those chunks are then composed into \"logical\" arrays.</li>\n<li>Chunks are created for each column in each RecordBatch.</li>\n<li>The chunks can be \"sliced and diced\" by operations on <code class=\"language-text\">Column</code>, <code class=\"language-text\">Table</code> and <code class=\"language-text\">DataFrame</code> objects, but are never copied (as long as flattening is not requested) and are conceptually immutable. (There is a low-level <code class=\"language-text\">Vector.set()</code> method however given that it could modify data that is used by multiple objects its use should be reserved for cases where implications are fully understood).</li>\n</ul>","timeToRead":1,"excerpt":"Notes on Memory Management Arrow reads in arrow data as arraybuffer(s) and then creates chunks that are \"sub array views\" into that bigâ€¦","frontmatter":{"title":"Notes on Memory Management","cover":"cover","category":"docs","tags":["default"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"relativeLinks":{},"slug":"docs/developer-guide/memory-management","toc":"docs"}}